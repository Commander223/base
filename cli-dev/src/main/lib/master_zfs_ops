#!/bin/bash

# tag master template snapshot and hold
function fs_master_snapshot {
  zfs snapshot lxc/master@template
  zfs hold keep lxc/master@template

  # Handle all other mountpoints
  # ---------------------------------------------------------------------------
  # Using the addmount function almost the same operations as we did above on 
  # the rootfs are handled: whatever existing data that was found inside the 
  # mount point on the rootfs are moved over to the new dataset once created
  # snapshots with holds are taken.

  fs_addmount master opt lxc
  fs_addmount master home lxc-data
  fs_addmount master var lxc-data
}

function fs_master_lxc_create {
  local SUBUTAI_USER="$1"
  local SUBUTAI_AUTH_KEY="$2"
  lxc-create -n master            \
   -t ubuntu                      \
   -B zfs --                      \
   -u $SUBUTAI_USER               \
   -S $SUBUTAI_AUTH_KEY
}


function fs_master_destroy {
 if [ -z "`zfs list lxc/master`" ]; then
    msg_error "No zfs dataset \"lxc/master\" found - aborting ..."
    exit 1
  fi

  if [ "`is_system_all_locked`" == "true" ]
  then
     msg_error "System locked by a subutai process"
     exit 1
  fi

  local container="master"
  local package_name=`get_package_name $container`
  local debian_root="$SUBUTAI_TMPDIR/$container"

  lock_subutai_system
  if [ $? != 0 ]; then msg_error "System cannot be locked!"; exit 1; fi

  # Confirm destroy operation
  echo WARNING: this destroys everything mercilessly
  while true; do
    read -p "Do you wish to destroy master template? [Y/N]" yn
    case $yn in
      [Yy]* ) break;;
      [Nn]* ) unlock_subutai_system
             if [ $? != 0 ]; then echo "System cannot be unlocked!"; exit 1; fi
             exit 1;;
      * ) echo "Please answer yes or no.";;
    esac
  done

  # Destroy all children of master template
  children_list=`zfs_get_children_list $container`
  for child in $children_list
  do
    subutai destroy -r -f $child
    if [ $? != 0 ]
    then
      unlock_subutai_system
      if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
      exit 1
    fi
  done

  # Check if the package is installed
  is_package_installed $package_name
  if [ $? == 0  ]; then
    apt-get --assume-yes --force-yes purge $package_name
  fi


  zfs release keep lxc/master-opt@template
  zfs destroy -r lxc/master-opt

  zfs release keep lxc-data/master-var@template
  zfs destroy -r lxc-data/master-var

  zfs release keep lxc-data/master-home@template
  zfs destroy -r lxc-data/master-home

  zfs release keep lxc/master@template
  zfs destroy -r lxc/master
  lxc-destroy -n master

  # Remove relevant directories under $SUBUTAI_TMPDIR if any
  rm -rf $debian_root
  unlock_subutai_system
  if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi

  msg_ok "Destruction of \"master\" completed succesfully "
}


function fs_master_export {

  if [ "`is_system_all_locked`" == "true" ]
  then
     msg_error "System locked by a subutai process"
     exit 1
  fi

  lock_subutai_system
  if [ $? != 0 ]; then msg_error "System cannot be locked!"; exit 1; fi

  # ---------------------------------------------------------------------------
  # (1) perform some sanity checks
  # ---------------------------------------------------------------------------
  local container="master"
  local debian_package_name=`get_debian_package_name $container`
  local debian_file="$SUBUTAI_TMPDIR/$debian_package_name.deb"
  local debian_dir=$SUBUTAI_TMPDIR/$debian_package_name
  local debian_root="$debian_dir$SUBUTAI_TMPDIR/$container"
  local deltas="$debian_root/deltas"

  if [ -f "$debian_file" ]; then
    msg_error "It seems the debian package file has already been generated"
    msg_error "Run rm -rf $debian_root* and try again"
    unlock_subutai_system
    if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
    exit 1
  fi

  mkdir -p $deltas

  zfs send "lxc/master@template" > "$deltas/rootfs.delta"
  if [ $? -eq 0 ]; then
    size=`ls -lh $deltas/rootfs.delta | awk '{print $5}'`
    msg_info "Exported $size delta for rootfs"
  else
    msg_error "Delta generation for rootfs failed"
  fi

  zfs send "lxc/master-opt@template" > "$deltas/opt.delta"
  if [ $? -eq 0 ]; then
    size=`ls -lh $deltas/opt.delta | awk '{print $5}'`
    msg_info "Exported $size delta for opt"
  else
    msg_error "Delta generation for opt failed"
  fi

  zfs send "lxc-data/master-var@template" > "$deltas/var.delta"
  if [ $? -eq 0 ]; then
    size=`ls -lh $deltas/var.delta | awk '{print $5}'`
    msg_info "Exported $size delta for var"
  else
    msg_error "Delta generation for opt failed"
  fi

  zfs send "lxc-data/master-home@template" > "$deltas/home.delta"
  if [ $? -eq 0 ]; then
    size=`ls -lh $deltas/home.delta | awk '{print $5}'`
    msg_info "Exported $size delta for home"
  else
    msg_error "Delta generation for opt failed"
  fi

  # ---------------------------------------------------------------------------
  # (3) generate the debian package from deltas, and package info
  # ---------------------------------------------------------------------------

  lxc_home=/var/lib/lxc/$container
  cp $lxc_home/config $debian_root
  cp $lxc_home/fstab  $debian_root
  cp $lxc_home/packages  $debian_root

  msg_info "Building debian package file for master"

  pkg=`deb_pkg $container`
  check_status "debian package $pkg generated" "$?"

  # Remove debian root directory after debian package generation
  rm -rf $debian_dir
  unlock_subutai_system
  if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi

}


function fs_master_import {
 # Check for Master Existence
  # ---------------------------------------------------------------------------

  local container="master"
  local debian_package_name=`get_debian_package_name $container`
  local debian_file="$SUBUTAI_TMPDIR/$debian_package_name.deb"
  local package_name=`get_package_name $container`

  lxc_assert_no $container
  zfs_assert_nods "lxc/$container"

  # Create the container
  # ---------------------------------------------------------------------------

  if [ -f "$debian_file" ]; then
    is_local="true"
  else
    is_local="false"
  fi

  if [ $is_local == "true" ]; then
    if [ "`are_md5sums_equal $container`" == true ];then
      msg_info "    - check passed: local \"$container\" package is same with the registered package"
    elif [ "`is_registered $container`" == true -a "`are_md5sums_equal $container`" == false  ]; then
      msg_error "A template $container is already registered and it is different from your local package. Try \"rm -rf $SUBUTAI_TMPDIR/$container-*\" and import again"
      exit 1
    fi
  else
      # check to make sure container is registered as a template
    if [ "`is_registered $container`" == "false" ]; then
      msg_error "A template with name \"$container\" is NOT registered. Aborting ..."
      exit 1
    else
      msg_info "    - check passed: \"$container\" is registered"
    fi
  fi


  # ----------------------------------------------------------------------------
  # (2) Install the debian package if subutai import not called during a debian package installation
  # ----------------------------------------------------------------------------

  if [ -z "$APT_GET_INVOCATION" -o "$APT_GET_INVOCATION" != "true" ]; then
    msg_info "    - subutai master_import called from command line"

    if [ "`is_system_all_locked`" == "true" ]; then
      msg_error "System locked by a subutai process"
      exit 1
    fi

    lock_subutai_system
    if [ $? != 0 ]; then msg_error "System cannot be locked!"; exit 1; fi

    pushd $SUBUTAI_TMPDIR > /dev/null
    is_package_installed $package_name
    if [ $? = 0  ]; then
      msg_error "Template $container seems already installed, please destroy first"
      unlock_subutai_system
      if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
      exit 1
    fi


    if [ "`is_dpkg_locked`" == "true" ]; then
      msg_error "$1 import FAILED! dpkg is locked by process!"
      unlock_subutai_system
      if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
      exit 1
    fi

    if [ "$is_local" == "true" ]
    then
      dpkg -i $debian_file
      if [ $? -eq 0 ]; then
        msg_ok "Debian package of $package_name is installed succesfully from local"
        unlock_subutai_system
        if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
        exit 0
      else
        msg_error "Debian package of $package_name could not be installed, removing"
        unlock_subutai_system
        if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
        subutai master_destroy
        apt-get --assume-yes --force-yes purge $package_name
        exit 1
      fi
    elif [ "`is_registered $container`" == "true" ]
    then
      apt-get --assume-yes --force-yes install $package_name
      if [ $? -eq 0 ]; then
        msg_ok "Debian package of $package_name is installed succesfully from repo"
        unlock_subutai_system
        if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
        exit 0
      else
        msg_error "Debian package of $package_name could not be installed, removing"
        unlock_subutai_system
        if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
        subutai destroy $container
        apt-get --assume-yes --force-yes purge $package_name
        exit 1
      fi
    else
      msg_error "Package $package_name is not found!"
      unlock_container_read $container
      if [ $? != 0 ]; then msg_error "Containers cannot be locked!"; exit 1; fi
      exit 1
    fi
    popd
  else
    msg_info "    - subutai master_import called while installing master from the debian package"
  fi

  debian_root=$SUBUTAI_TMPDIR/$container
  config=$debian_root/config
  fstab=$debian_root/fstab
  deltas=$debian_root/deltas
  lxc_home=/var/lib/lxc/master
  lxc_rootfs=$lxc_home/rootfs
  mkdir -p $lxc_rootfs
  cp $config $lxc_home
  cp $fstab $lxc_home
  cp $debian_root/packages $lxc_home

  zfs recv lxc/master < $deltas/rootfs.delta
  zfs hold keep lxc/master@template
  zfs set mountpoint=$lxc_rootfs lxc/master
  if [ $? -eq 0 ]; then
    size=`ls -lh $deltas/rootfs.delta | awk '{print $5}'`
    msg_info "    - Imported $size delta for rootfs"
  else
    msg_error "Delta import for rootfs failed"
  fi

  zfs recv lxc/master-opt < $deltas/opt.delta
  zfs hold keep lxc/master-opt@template
  if [ $? -eq 0 ]; then
    size=`ls -lh $deltas/opt.delta | awk '{print $5}'`
    msg_info "    - Imported $size delta for opt"
  else
    msg_error "Delta import for opt failed"
  fi

  zfs recv lxc-data/master-var < $deltas/var.delta
  zfs hold keep lxc-data/master-var@template
  if [ $? -eq 0 ]; then
    size=`ls -lh $deltas/var.delta | awk '{print $5}'`
    msg_info "    - Imported $size delta for var"
  else
    msg_error "Delta import for var failed"
  fi

  zfs recv lxc-data/master-home < $deltas/home.delta
  zfs hold keep lxc-data/master-home@template
  if [ $? -eq 0 ]; then
    size=`ls -lh $deltas/home.delta | awk '{print $5}'`
    msg_info "    - Imported $size delta for home"
  else
    msg_error "Delta generation for opt failed"
  fi

  if [ -d $debian_root ]; then
    rm -rf $debian_root
  fi
  exit 0
}


function fs_master_setup {
  # Check that the release code name is trusty
  # ---------------------------------------------------------------------------
  if [ ! "$DISTRIB_CODENAME" = "trusty" ]; then
    echo "Incompatible Ubuntu Release"
    exit 1
  fi

  # Check that zfs has been properly installed
  # ---------------------------------------------------------------------------
  if [ -z "`zfs list lxc`" ]; then
    echo lxc dataset not found
    exit 1
  fi

  if [ -z "`zfs list lxc-data`" ]; then
    echo lxc-data dataset not found
    exit 1
  elif [ ! -d "$SUBUTAI_TMPDIR" ]; then
    mkdir $SUBUTAI_TMPDIR
  fi

  # Check that the master image has been properly installed
  # ---------------------------------------------------------------------------

  if [ -z "`lxc-ls | grep master`" ]; then
    echo Could not find installed base container, installing now ...
    subutai master_create
  fi
}
