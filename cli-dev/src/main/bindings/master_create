#!/bin/bash


function master_create {
  if [ "`is_system_all_locked`" == "true" ]
  then
     msg_error "System locked by a subutai process"
     exit 1
  fi

  lock_subutai_system
  if [ $? != 0 ]; then msg_error "System cannot be locked!"; exit 1; fi

  # Check for Master Existence
  # ---------------------------------------------------------------------------

  lxc_assert_no master
  zfs_assert_nods "lxc/master"

  # Create the container
  # ---------------------------------------------------------------------------

  lxc-create -n master            \
   -t ubuntu                      \
   -B zfs --                      \
   -u $SUBUTAI_USER               \
   -S $SUBUTAI_AUTH_KEY 

  # Add config and app data paths to the config file
  config=/var/lib/lxc/master/config
  for config_path in `echo "$SUBUTAI_CONFIG_PATH" | sed -e "s/\:/ /g"`; do
    echo subutai.config.path = $config_path >> $config
  done

  # Add pre-start hook script entry
  echo lxc.hook.pre-start = $subutai_script_base/pre_start_hook >> $config
  echo subutai.parent = master >> $config
  echo subutai.git.branch = master >> $config
  sed -i '/lxc.network.link =.*/c\lxc.network.veth.pair = master' $config
  echo "lxc.network.script.up = /usr/share/subutai-cli/subutai/lib/ovs_ops" >> $config
  echo "lxc.network.type = veth" >> $config
  echo "lxc.network.flags = up" >> $config
  
  # (0) Start it up, update, dist-upgrade, shutdown
  # (1) Backup rootfs contents and delete contents
  # (2) Take created snapshot and hold
  # (3) Recover from backup of rootfs
  # (4) Delete backup
  # (5) Setup git repository in / and control /etc
  # (6) Tag template snapshot and hold

  # (0)

  if [ -n "$SUBUTAI_APT_MIRROR" ]; then
    echo "$SUBUTAI_APT_MIRROR archive.ubuntu.com" >> /var/lib/lxc/master/rootfs/etc/hosts
    echo "$SUBUTAI_APT_MIRROR security.ubuntu.com" >> /var/lib/lxc/master/rootfs/etc/hosts
  fi
  
  lxc_wait_net master
  local subutai_repo_file="/var/lib/lxc/master/rootfs/etc/apt/sources.list.d/subutai-repo.list"
  echo "deb $SUBUTAI_SITE_REPO $SUBUTAI_OS_RELEASE_NAME main" \
      >> $subutai_repo_file
  echo "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen" \
      >> $subutai_repo_file

  # Configuration for apt-proxy
  if [ -n "$SUBUTAI_APT_PROXY" ]; then
    echo "deb $SUBUTAI_APT_PROXY $SUBUTAI_OS_RELEASE_NAME  main restricted universe multiverse" \
       >> $subutai_repo_file
    echo "deb-src $SUBUTAI_APT_PROXY $SUBUTAI_OS_RELEASE_NAME  main restricted universe multiverse" \
       >> $subutai_repo_file
  fi
  
  lxc-attach -n master -- apt-get update
  lxc-attach -n master -- apt-get -y dist-upgrade

  if [ -n "$SUBUTAI_PACKAGES" ]; then
    lxc-attach -n master -- \
         env DEBIAN_FRONTEND=noninteractive apt-get --assume-yes --force-yes \
           install `echo $SUBUTAI_PACKAGES | sed -e "s/,/ /"`
  fi

  lxc-attach -n master -- apt-get -y autoclean
  lxc-attach -n master -- apt-get -y autoremove

  echo "dpkg -l" | lxc-attach -n master > /var/lib/lxc/master/packages

  lxc-stop -n master
  lxc-wait -n master -s 'STOPPED'
  sleep 2

  # (5) setup git repository in / and control /etc
  git_init_master

  # (6)
  echo Taking @template snapshot of master\'s rootfs
  zfs snapshot lxc/master@template
  zfs hold keep lxc/master@template

  # Handle all other mountpoints
  # ---------------------------------------------------------------------------
  # Using the addmount function almost the same operations as we did above on 
  # the rootfs are handled: whatever existing data that was found inside the 
  # mount point on the rootfs are moved over to the new dataset once created
  # snapshots with holds are taken.

  addmount master opt lxc
  addmount master home lxc-data
  addmount master var lxc-data
  
  unlock_subutai_system
  if [ $? != 0 ]; then msg_error "System cannot be unlocked!"; exit 1; fi
}

function master_create_description {
  echo creates a new master from scratch
}


