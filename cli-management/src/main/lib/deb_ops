#!/bin/bash

# ==========================================================================
# Set of functions that operates on debian packages
# ==========================================================================

SUBUTAI_REPO_DIR="/repo/ksks"
SUBUTAI_TMPDIR="/tmp"


function add_package {
  local file_path=$1
  assert_file "$file_path"
  # extract debian package name from full path
  local debian_package=$(echo $file_path | sed 's/.*\///')
  assert_debian_package "$debian_package"
  
  pushd $SUBUTAI_REPO_DIR > /dev/null
  # Copy file under custom package directory
  cp -a "$file_path" "$SUBUTAI_REPO_DIR/amd64/trusty/"
  # Add file to the apt repository
  reprepro includedeb trusty amd64/trusty/$debian_package
  popd > /dev/null
}


function remove_package {
  local debian_package=$1
  local file_path=$SUBUTAI_REPO_DIR/amd64/trusty/$debian_package
  assert_file "$file_path"
  assert_debian_package "$debian_package"
 
  # Remove file under custom package directory
  rm $file_path
  pushd $SUBUTAI_REPO_DIR > /dev/null
  # Remove file from the apt repository
  local package_control_name=$(get_package_control_name $debian_package)
  reprepro remove trusty $package_control_name
  popd > /dev/null
}


function extract_package {
  local debian_package=$1
  local extract_files=$2

  local file_path=$SUBUTAI_REPO_DIR/amd64/trusty/$debian_package
  assert_file "$file_path"
  assert_debian_package "$debian_package"

  pushd $SUBUTAI_TMPDIR > /dev/null
  local extract_directory_name=${debian_package:0:$((${#debian_package} - 4))}
  # delete directory if exists
  rm -rf "$SUBUTAI_TMPDIR/$extract_directory_name"
  mkdir "$SUBUTAI_TMPDIR/$extract_directory_name"

  # Extract whole package content
  if [ -z $extract_files ]; then
    pushd $SUBUTAI_TMPDIR > /dev/null
    # extract the package under $SUBUTAI_TMPDIR
    dpkg -x $file_path "$SUBUTAI_TMPDIR/$extract_directory_name"
    dpkg -e $file_path "$SUBUTAI_TMPDIR/$extract_directory_name/DEBIAN/"
  # Extract the specific files from the debian package
  else
    pushd $SUBUTAI_TMPDIR/$extract_directory_name > /dev/null

    data_tar_file=$(ar t $file_path | grep data)
    # Extract specific file from debian package
    ar x $file_path $data_tar_file
    IFS=',' read -a files <<< "$extract_files"
    for file in "${files[@]}"
    do
      file="./$file"
      msg_info "    - extracting file: $file"
      tar -xf $data_tar_file $file > /dev/null 2>&1
      local status=$?
      if [ $status != 0 ]; then
	msg_error "Could not extract $file. Aborting!"
	exit 1
      fi
    done
    rm $data_tar_file
  fi
  msg_ok "Files extracted under $SUBUTAI_TMPDIR/$extract_directory_name"

  popd > /dev/null
}


function list_package {
  search_pattern=$1
  if [ -z $search_pattern ]; then
    msg_error "Search pattern is not provided. Aborting!"
    exit 1
  fi

  echo "$(apt-cache search $search_pattern)"
}


function info_package {
  package_name=$1
  if [ -z $package_name ]; then
    msg_error "Package name is not provided. Aborting!"
    exit 1
  fi

  echo "$(apt-cache show $package_name)"
}


function assert_file {
  local file=$1
  if [ -z $file ]; then
    msg_error "File name cannot be empty"
    exit 1
  fi

  if [ ! -f $file ]; then
    msg_error "File $file does not exist."
    exit 1
  fi
  msg_info "    - check passed: file \"$file\" exists."
}


function assert_debian_package {
  local file=$1
  if [ -z $file ]; then
    msg_error "Package name cannot be empty"
    exit 1
  fi

  if [[ $file != *.deb ]]
  then
    msg_error "$file is not a debian package!"
    exit 1
  fi
  msg_info "    - check passed: file \"$file\" is a debian package."
}


function get_package_control_name {
  local debian_package=$1
  if [ -z $debian_package ]; then
    msg_error "Package name cannot be empty"
    exit 1
  fi

  if [[ $debian_package == *\/* ]]; then
    msg_error "Package name should not contain \/ character"
    exit 1
  fi

  echo $debian_package | cut -f1 -d"_"
}
