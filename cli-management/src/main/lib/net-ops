#!/bin/bash

# ==========================================================================
# Set of functions that checks networking functionality with a mix of utility
# functions.
# ==========================================================================

function net_bridge_blocker {
  local brIP=`ip -o addr | awk '!/^[0-9]*: ?lo|link\/ether/ {print $2" "$4}' \\
        | grep br- |egrep -v "\:|br-int"`
  local a=0
  local b=0
  declare -A pairs
  for i in $brIP
  do
    pairs[$a,$b]="$i"
    b=$((b+1))
    if [ $b -eq 2 ]; then
      a=$((a+1))
      b=0
    fi
  done

  local array_size=${#pairs[@]}
  array_size=$((array_size/2))

  for (( i=0;i<$array_size;i++ ))
  do
    for (( j=0;j<$array_size;j++ ))
    do
      if [ $j -eq $i ]; then continue;fi
      subutai management_network -f ${pairs[$i,0]} "priority=2500 \
           ,dl_type=0x800,nw_src=${pairs[$j,1]},action=drop"
      grep -q -e \
      '-f '${pairs[$i,0]}' "priority=2500,dl_type=0x800,nw_src='${pairs[$j,1]}',action=drop"' \
      /etc/init.d/service-interface \
      || sed -i '/Re-init OVS flows/i \subutai management_network -f '${pairs[$i,0]}' "priority=2500,dl_type=0x800,nw_src='${pairs[$j,1]}',action=drop"' \
      /etc/init.d/service-interface
    done
  done
}

function net_check_tunnelPortName {
  local tunnelPortName="$1"
  local list=$(ovs-vsctl list-ports br-tun)
  local result=$(echo $list | grep $tunnelPortName)
  
  #checking TunnelPortname is duplicated or not
  if [ "$result" ]; then
    msg_error "TunnelPortName \"$tunnelPortName\" might be already exist or wrong pattern..
     Try opening a tunnel for instance: tunnel2, tunnel3, tunnel4"
    show_usage "`management_network_usage`"
  fi

  #checking portname has tunnel tag inside or not  
  if [[ "$tunnelPortName" == *"tunnel"* ]]; then
     echo ""
  else
    msg_error "TunnelPortName \"$tunnelPortName\" is not valid.. It should contain tunnel tag inside"
    show_usage "`management_network_usage`"
  fi
}

function net_check_ip_validation {
  local ipcheck="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]\
|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
  local ip="`echo $1 | cut -d "/" -f1`"

  local list=$(subutai management_network -l)
  local result=$(echo $list | grep $ip)
  
  #Checking IP Address Duplication
  if [ "$result" ]; then
    msg_error "Tunnel IpAddress \"$ip\" is already exist.."
    show_usage "`management_network_usage`"
  fi
  #Checking IP Address Validation
  echo $ip | grep -w -E -o $ipcheck > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    msg_info "IP Address: OK"
  else
    msg_error "Invalid IP Address: $ip. Aborting..."
    show_usage "`management_network_usage`"
  fi
}

function net_check_tunnel_type {
  local tunnelType="$1"
  #Checking tunnelType is valid or not
  case "$tunnelType" in "vxlan" | "gre")
     msg_info "TunnelType: OK"
     ;;
  *)
     msg_error "TunnelType must be vxlan or gre. Aborting ..."
     show_usage "`management_network_usage`"
     ;;
  esac
}

function net_check_tunnelPortName_exist {
  local tunnelPortName="$1"
#  local list=$(ovs-vsctl list-ports br-$tunnelPortName)
  local list=$(ovs-vsctl show | grep "Interface \"tunnel*" | awk -F" " '{print $2}' | tr -d '"')
  local result=$(echo $list | grep $tunnelPortName)

  #checking TunnelPortname is exist or not 
  if [ -z "$result" ]; then
    msg_error "TunnelPortName \"$tunnelPortName\" does not exist.. Could not be deleted.."
    show_usage "`management_network_usage`"
  fi
}

function net_check_bridgeName {
  local bridgeName="$1"
  local list=$(ovs-vsctl list-br)
  local result=$(echo $list | grep $bridgeName)

  #checking bridgeName is valid or not
  if [ -z "$result" ]; then
    msg_error "BridgeName \"$bridgeName\" does not exist.."
    show_usage "`management_network_usage`"
  fi
}

function net_check_N2N_IpAddress {
  local ipcheck="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]\
|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
  local superNodeIp="$1"
  local localPeerIp="$2"

  #Checking superNode IP Address Validation
  echo $superNodeIp | grep -w -E -o $ipcheck > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    msg_info "SuperNode IP Address: OK"
  else
    msg_error "Invalid SuperNode IP Address: $superNodeIp. Aborting..."
    show_usage "`management_network_usage`"
  fi

  #Checking LocalPeer IP Address Validation
  echo $localPeerIp | grep -w -E -o $ipcheck > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    msg_info "LocalPeer IP Address: OK"
  else
    msg_error "Invalid LocalPeer IP Address: $localPeerIp. Aborting..."
    show_usage "`management_network_usage`"
  fi
}

function net_check_portNumber {
  local port="$1"

  if expr "$port" : '-\?[0-9]\+$' >/dev/null
  then
     if [ $port -gt "65535" ]; then
       msg_error "Port value \"$port\" is greater than maximum-65535 value.."
       show_usage "`management_network_usage`"
     else
       msg_info "Port Number: OK"
     fi
  else
     msg_error "Port value \"$port\" is not valid.."
     show_usage "`management_network_usage`"
  fi
}

function net_check_keyType {
  local keyType="$1"

  declare -a listArray=('string' 'file')
  
  #checking keyType is valid or not
  local result="false"
  for i in "${listArray[@]}"
  do
    if [  $i == $keyType ]; then
        result="true"
    fi
  done
 
  if [ "false" == "$result" ]; then
    msg_error "keyType \"$keyType\" is not valid.."
    show_usage "`management_network_usage`"
  fi
}

function net_check_keyFile {
  local keyFile="$1"

  if [ ! -f  "$keyFile" ]; then
    msg_error "keyFile \"$keyFile\" does not exist.."
    show_usage "`management_network_usage`"
  fi
}

function net_create_tap_device {
  local interfaceName=$1
  local localPeerIpAddress=$2
 
  #get IP list Array via hostname function
  deviceExist=`hostname -I`

  #check tap device is created or not.
  if [[ $deviceExist == *"$localPeerIpAddress"* ]]; then
    #device exist, skip re-create tap device operation continue with edge command
    msg_info "Device $interfaceName : exist with $localPeerIpAddress"
  else
    #create device with its name and ip address, call "tap_create"
    msg_info "Device $interfaceName : does not exist creating tap device.."
    tap_create -d $interfaceName -a $localPeerIpAddress &
  fi
}
