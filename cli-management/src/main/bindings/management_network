#!/bin/bash
. /usr/share/subutai-cli/subutai/lib/net-ops

function management_network_usage {
cat <<EOF
-------------------------------------------------------------------------------
Usage:   Establish a tunnnel to a subutai peer whose address information provided
       "subutai \[-qh\] management_network -c TUNNELPORTNAME TUNNELIPADDRESS TUNNELTYPE

Usage:   List tunnnels on subutai management host
         "subutai \[-qh\] management_network -l

Usage:   Remove selected tunnnel from subutai management host
        "subutai \[-qh\] management_network -r TUNNELPORTNAME
*******************************************************************************
Usage:   Add a simple Open flow rule to a bridge		
        "subutai \[-qh\] management_network -f BRIDGENAME FLOWCONFIGURATION  

Usage:   Show flow table informations in a brdige                
        "subutai \[-qh\] management_network -s BRIDGENAME

Usage:   Show ports informations in a brdige                
        "subutai \[-qh\] management_network -p BRIDGENAME

Usage:   Delete a Open flow rule from a bridge                 
        "subutai \[-qh\] management_network -d BRIDGENAME MATCHCASE
*******************************************************************************
Usage:   Create a n2n Tunnel                 
        "subutai \[-qh\] management_network -N SUPERNODEIPADDRESS SUPERNODEPORT INTERFACENAME COMMUNITYNAME LOCALPEERIPADDRESS KEYTYPE KEYFILE

Usage:   List opened n2n Tunnels                 
        "subutai \[-qh\] management_network -L

Usage:   Remove a n2n Tunnel                 
        "subutai \[-qh\] management_network -R INTERFACENAME COMMUNITYNAME
******************************************************************************
Usage:   List opened tap devices                 
        "subutai \[-qh\] management_network -S

Usage:   Remove a tap device                 
        "subutai \[-qh\] management_network -V INTERFACENAME
******************************************************************************
Usage:   Create a gateway tap device                 
        "subutai \[-qh\] management_network -T VLANIP/SUBNET VLANID

Usage:   Delete a gateway tap device                 
        "subutai \[-qh\] management_network -D VLANID
******************************************************************************
Usage:   Create VNI-VLAN Mapping on a Tunnel                
        "subutai \[-qh\] management_network -m TUNNELPORTNAME VNI VLANID ENV_ID

Usage:   Delete VNI-VLAN Mapping on a Tunnel                 
        "subutai \[-qh\] management_network -M TUNNELPORTNAME VNI VLANID

Usage:   List  VNI-VLAN Mapping on a Tunnel                 
        "subutai \[-qh\] management_network -v 

******************************************************************************
Usage:   Reserve VNI                 
         "subutai \[-qh\] management_network -E
         Example: subutai management_network -E 5343 205
         Where: 5343 is VNI number, 205 vlan number 
******************************************************************************
Usage:   LIST Reserved VNI                 
         "subutai \[-qh\] management_network -Z list
         Example: subutai management_network -Z list

-------------------------------------------------------------------------------
EOF
}

function management_network {

  local tunnelPortName
  local tunnelIpAddress
  local tunnelType
  local extra
  local bridgeName
  local flowConfiguration
  local matchCase
  local supernodeIpAddress
  local supernodePort
  local interfaceName
  local communityName
  local localPeerIpAddress
  local keyType
  local keyFile  

  local createTunnel="false"
  local listTunnel="false"
  local removeTunnel="false"
  local addFlow="false"
  local deleteFlow="false"
  local showFlow="false"
  local showPort="false"
  local createN2NTunnel="false"
  local listN2NTunnel="false"
  local removeN2NTunnel="false"
  local createGateway="false"
  local removeGateway="false"
  local vnivlanMap="false"  
  local delvnivlanMap="false"
  local listVNImapping="false"
  local listTapDevices="false"
  local removeTapDevice="false"
  local reserveVNI="false"
  local lresVNI="false"
  shift_amount=0;
  while getopts ":clrfspdNLRSVTDmvMEZ:" opt; do
     case $opt in
       c)
	 createTunnel="true"	
	 shift
         ;;
       l)
	 listTunnel="true"
	 ;;
       r)
	 removeTunnel="true"
	 shift
	 ;;
       f)
	 addFlow="true"
         shift
	 ;;
       s)
	 showFlow="true"
         shift
         ;;
       d)
         deleteFlow="true"
         shift
         ;;
       p)
         showPort="true"
         shift
         ;;
       N)
         createN2NTunnel="true"
         shift
         ;;
       L)
         listN2NTunnel="true"
         shift
         ;;
       R)
         removeN2NTunnel="true"
         shift
         ;;
       S)
         listTapDevices="true"
         shift
         ;;
       V)
         removeTapDevice="true"
         shift
         ;;
       T)
         createGateway="true"
         shift
         ;;
       D)
         removeGateway="true"
         shift
         ;;
       m)
         vnivlanMap="true"
         shift
         ;;
       v)
         listVNImapping="true"
         shift
         ;;
       E)
         reserveVNI="true"
         shift
         ;;
       Z)
         lresVNI="true"
         shift
         ;;
       M)
         delvnivlanMap="true"
         shift
         ;;
       \?)
          msg_error "Unrecognized option -$OPTARG"
          show_usage "`management_network_usage`"
	  exit 1
          ;;
     esac
     shift_amount=$(($shift_amount + 1))
  done
  
  if [ "true" == "$createTunnel" ]; then  
     tunnelPortName="$1"
     tunnelIpAddress="$2"
     tunnelType="$3"
     extra="$4"

     if [ -z "$tunnelPortName" ]; then
        msg_error "TunnelPortName Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
     fi

     if [ -z "$tunnelIpAddress" ]; then
        msg_error "TunnelIpAddress Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
     fi

     if [ -z "$tunnelType" ]; then
        msg_error "TunnelType Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
     fi

     if [ "$extra" ]; then
        msg_error "extra Parameter provided. Aborting ..."
        show_usage "`management_network_usage`"
     fi
     
     net_check_tunnelPortName $tunnelPortName
     net_check_ip_validation $tunnelIpAddress
     net_check_tunnel_type $tunnelType
  
     ovs-vsctl --may-exist add-port br-tun $tunnelPortName
     ovs-vsctl set Interface $tunnelPortName type=$tunnelType options:key=flow \
     options:remote_ip=$tunnelIpAddress
     msg_info "A port of $tunnelPortName is opened type=$tunnelType and IP=$tunnelIpAddress in br-tun bridge."
   fi
   
   if [ "true" == "$listTunnel" ]; then
      echo -e "List of Tunnels"
      echo -e "--------"
     ovs-vsctl show | awk 'BEGIN {FS="\n"; RS="";ORS=""}{x=1;y=1;while ( x<NF ) { Array[x]=$x; x++;} 
     for(i=0; i<NF;i++){ if(Array[i] ~ /Port/ && Array[i+3] ~ /remote_ip/){ split(Array[i],a,"\"");
      split(Array[i+3],b,"\""); print a[2]"-"b[2]"\n"; } }}'
      # ovs-vsctl show | grep remote_ip | awk '{ print $3 }'
   fi

   if [ "true" == "$removeTunnel" ]; then
      tunnelPortName="$1"
      extra="$2"

      if [ -z "$tunnelPortName" ]; then
         msg_error "TunnelPortName Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ "$extra" ]; then
         msg_error "extra Parameter provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi  
      net_check_tunnelPortName_exist $tunnelPortName
 
      ovs-vsctl del-port $tunnelPortName
      rm /var/subutai-network/"$tunnelPortName"_vni_vlan
      msg_info "$tunnelPortName is deleted from br-tun."
   fi

   if [ "true" == "$addFlow" ]; then
      bridgeName="$1"
      flowConfiguration="$2"
      extra="$3"      

      if [ -z "$bridgeName" ]; then
         msg_error "brdigeName Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ -z "$flowConfiguration" ]; then
         msg_error "flowConfiguration Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ "$extra" ]; then
         msg_error "extra Parameter provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      net_check_bridgeName $bridgeName 
      ovs-ofctl add-flow $bridgeName "$flowConfiguration"
      msg_info "One Flow Rule is Added with this configuration: $flowConfiguration"
   fi
       
   if [ "true" == "$showFlow" ]; then
      bridgeName="$1"
      extra="$2"

      if [ -z "$bridgeName" ]; then
         msg_error "brdigeName Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi
      
      if [ "$extra" ]; then
         msg_error "extra Parameter provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi
      
      net_check_bridgeName $bridgeName

      echo "****************************"
      echo "Flow Table informations of $bridgeName"
      echo "****************************"
      ovs-ofctl dump-flows $bridgeName
      echo "****************************"

   fi

   if [ "true" == "$showPort" ]; then
      bridgeName="$1"
      extra="$2"

      if [ -z "$bridgeName" ]; then
         msg_error "brdigeName Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ "$extra" ]; then
         msg_error "extra Parameter provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      net_check_bridgeName $bridgeName

      echo "----------------------------"
      echo "Port informations of $bridgeName"
      echo "----------------------------"
      ovs-ofctl show $bridgeName
      echo "----------------------------"
   fi 

   if [ "true" == "$deleteFlow" ]; then
      bridgeName="$1"
      matchCase="$2"
      extra="$3"
      local message

      if [ -z "$bridgeName" ]; then
         msg_error "brdigeName Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ -z "$matchCase" ]; then
         msg_error "matchCase Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi
  
      if [ "$extra" ]; then
         msg_error "extra Parameter provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi
    
      net_check_bridgeName $bridgeName
     
      if [ "$matchCase" == "all" ]; then
         ovs-ofctl del-flows $bridgeName
         msg_info "All Flows are deleted in $bridgeName"
      else
         ovs-ofctl del-flows $bridgeName $matchCase
         msg_info "All Matched flows are deleted in $bridgeName"
      fi
   fi
   
   if [ "true" == "$createN2NTunnel" ]; then
      supernodeIpAddress="$1"
      supernodePort="$2"
      interfaceName="$3"
      communityName="$4"
      localPeerIpAddress="$5"
      keyType="$6"
      keyFile="$7"
      extra="$8"

      if [ -z "$supernodeIpAddress" ]; then
         msg_error "supernodeIpAddress Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi
    
      if [ -z "$supernodePort" ]; then
         msg_error "supernodePort Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ -z "$interfaceName" ]; then
         msg_error "interfaceName Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ -z "$communityName" ]; then
         msg_error "communityName Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ -z "$localPeerIpAddress" ]; then
         msg_error "localPeerIpAddress Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi
    
      #keytype can be keystring or TWOFISH key.
      if [ -z "$keyType" ]; then
         msg_error "keytype Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi
      
      #keyfile accordingly provided from a file or a keystring
      if [ -z "$keyFile" ]; then
         msg_error "keyfile Parameter not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ "$extra" ]; then
         msg_error "extra Parameter provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      net_check_N2N_IpAddress $supernodeIpAddress $localPeerIpAddress
      net_check_portNumber $supernodePort
      net_check_keyType $keyType
      net_create_tap_device $interfaceName $localPeerIpAddress 
      
      if [ $keyType = "string" ]; then 
         edge -l $supernodeIpAddress:$supernodePort -d $interfaceName -c $communityName -k $keyFile -r -a $localPeerIpAddress
      elif [ $keyType = "file" ]; then 
         net_check_keyFile $keyFile
         edge -l $supernodeIpAddress:$supernodePort -d $interfaceName -c $communityName -K $keyFile -r -a $localPeerIpAddress
      fi

      msg_info "New Com device is created: $interfaceName"
      msg_info "New CommunityName is created: $communityName"
     
   fi

   if [ "true" == "$listN2NTunnel" ]; then
      result=`echo -e "LocalPeerIP \t ServerIP \t Port \t LocalInterface \t Community"`
      echo $result
      ps aux | awk 'BEGIN {FS="\n"; RS="";ORS=""}{x=1;y=1;while ( x<NF ){Array[x]=$x; x++;}for(i=0; i<NF;i++){if(Array[i] ~ /awk /){;}else if(Array[i] ~ /edge/){split(Array[i],a,"\edge\ -l ");split(a[2],b,"\ ");for (x in b){if( x == 7 ||  b[x] ~ /-/ );else if( b[x] ~ /:/ ){split(b[x],c,":");print c[1]"\t"c[2]"\t";}else{ print b[x]"\t";}}print "\n";}}}'
   fi

   if [ "true" == "$removeN2NTunnel" ]; then
      if [ -z $1 ] || [ -z $2 ]; then
        msg_error "missing parameter!"
        show_usage "`management_network_usage`"
      fi
       
      kill -9 `ps aux | grep -e "-c $2" | grep -e "-d $1" | grep -v "\-\-color" | awk -F" " '{print $2}'` > /dev/null 2>&1
      if [ "$?" != "0" ]; then
        msg_error "Removing Tunnel Failed!"
        show_usage "`management_network_usage`"
      fi
      msg_ok "N2N Tunnel Removed!"
   fi

   if [ "true" == "$createGateway" ]; then
      ipAdd="$1"
      vlanID=$2
      if [ -z "$ipAdd" ]; then
         msg_error "Ip Address has not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      if [ -z "$vlanID" ]; then
         msg_error "VLAN ID has not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi

      ovs-vsctl add-br br-$vlanID
      ifconfig  br-$vlanID $ipAdd
      ovs-vsctl add-port br-$vlanID "$vlanID"toint
      ovs-vsctl set interface "$vlanID"toint type=patch
      ovs-vsctl set interface "$vlanID"toint options:peer=intto"$vlanID"
      ovs-vsctl add-port br-int intto"$vlanID"
      ovs-vsctl set interface intto"$vlanID" type=patch
      ovs-vsctl set interface intto"$vlanID" options:peer="$vlanID"toint
      ovs-vsctl set port br-$vlanID tag=$vlanID 
      ovs-ofctl add-flow br-$vlanID "priority=2500,ip,nw_src=10.10.10.0/24 actions=drop"
      ovs-ofctl add-flow br-int "priority=2500,ip,nw_src=10.10.10.0/24,nw_dst=$ipAdd actions=drop"
      ovs-ofctl add-flow br-$vlanID "priority=2600,ip,nw_src=10.10.10.1 actions=normal"
      ovs-ofctl add-flow br-int "priority=2600,ip,nw_src=10.10.10.1,nw_dst=$ipAdd actions=normal"
      msg_info "Gateway created for $vlanID"
   fi

   if [ "true" == "$listTapDevices" ]; then
      result=`echo -e "TapDeviceInterface \t TapDeviceIPAddress "`
      echo $result
      ps aux | grep 'tap_create -d' | grep -v 'grep' | awk '{ print $13 "  " $15}'
   fi

   if [ "true" == "$removeTapDevice" ]; then
      if [ -z $1 ]; then
        msg_error "missing parameter!"
        show_usage "`management_network_usage`"
      fi

      kill -9 `ps aux | grep -e "-d $1" | grep -v "\-\-color" | awk -F" " '{print $2}'` > /dev/null 2>&1
      if [ "$?" != "0" ]; then
       msg_error "Removing Tap Device Failed!"
       show_usage "`management_network_usage`"
      fi
      msg_ok "Tap Device Removed!"
   fi

   if [ "true" == "$removeGateway" ]; then
      vlanID="$1"
      if [ -z "$vlanID" ]; then
         msg_error "VLAN ID has not provided. Aborting ..."
         show_usage "`management_network_usage`"
      fi
      ovs-vsctl del-br br-$vlanID
      ovs-vsctl del-port br-int intto$vlanID
      msg_info "Gateway removed for $vlanID"
   fi


   if [ "true" == "$listVNImapping" ]; then
      search_dir="/var/subutai-network"
      if [ -d "$search_dir" ]; then
         # Control will enter here if $DIRECTORY exists.
#         echo "#################################################################################"
#         echo -e "  Tunnel name\t |  VNI \t| VLAN ID   "
         for entry in "$search_dir"/tunnel*
           do
             if [ -f "$entry" ]; then  
#               echo "---------------------------------------------------------------------------------"
             local tunname=$(echo $(basename $entry)} | awk -F"_" '{print $1}')
#		echo "$tunname"
#		cat $entry | awk -v var="$tunname"  -F" " '{print $var "," $1 "," $2}'
		cat $entry | awk -v var="$tunname"  -F" " '{print var ","  $1 "," $2 "," $3 }'

             fi
           done
#         echo "#################################################################################"
      else 
         echo "It seems no VNi mapping yet cause I can't open folder $search_dir"
      fi
   fi

   if [  "true" == "$lresVNI"  ]; then 
      file_name="/var/subutai-network/vni_reserve"
#      echo "$file_name"
#      cat $file_name
      if [ ! -f "$file_name" ]; then
            msg_info "No reserved VNIs,not exist file for reserved VNI" >&2
            exit 10
        fi
      local status=$1
      if   [ "$status" == "list"  ]; then
         cat $file_name | awk -F " " '{print $1 "," $2}'
         exit 0              
      elif [ "$status" == "delete" ]; then 
    vni_id=$2
    ENV_ID=$3
    if [  -z "$vni_id" ] || [ -z "$ENV_ID" ]; then
       msg_error "Provide VNI_ID ENV_ID" >&2
    fi
    file_name2="/var/subutai-network/vni_reserve"
    sed -i "/$vni_id\s$ENV_ID/d" $file_name2
         exit 0
      fi


#     echo "RESREVED VNIS:"
   fi


    if [  "true" == "$reserveVNI"  ]; then
        local file_name="/var/subutai-network/vni_reserve"
        if [ ! -d '/var/subutai-network' ]
        then
            mkdir -p "/var/subutai-network"
        fi
        if [ ! -f "$file_name" ]
        then
            touch $file_name
        fi
        local VNI=$1
        local ENV_ID=$2
        if [ -z "$VNI" ] || [ -z $ENV_ID ]; 
        then
#         show_usage "`management_network_usage`"
         msg_error "Provide VNI and ENV_ID" >&2
         exit 10
        fi
        check=$(cat $file_name | grep $VNI | awk -F " " '{print $2}')
#        echo "check: $check"
        if [ "$check" == "$ENV_ID" ]; then
          msg_ok "Pair VNI-ENV_ID exists" >&2
          exit 0
        fi
        local existingVNI=$(cat $file_name | awk -F " " '{ print $1}' | grep $VNI)
        local count=$(cat $file_name | awk -F " " '{ print $1}' | grep $VNI | wc -l)
        if [ $count -gt 1 ]; then
          msg_error "double setting for VNI" >&2
          exit 10
        fi
        local existingENV=$(cat $file_name | awk -F " " '{ print $2}' | grep $ENV_ID)
        local count=$(cat $file_name | awk -F " " '{ print $2}' | grep $ENV_ID | wc -l)
        if [ $count -gt 1 ]; then
          msg_error "double setting for ENV" >&2
          exit 10
        fi
        
#        echo "VNI=$existingVNI, ENV_ID=$existingENV"
        if [ "$existingVNI" == $VNI ] && [ "$existingENV" == $ENV_ID ];then
             msg_error "VNI or ENV_ID reserved already">&2
             exit 1
        elif [ "$existingVNI" == $VNI    ];then
                 msg_error "VNI is existing for different ENV" >&2
                 exit 1
        elif [ "$existingENV" == $ENV_ID ];then
                  msg_error "ENV is existing for different VNI" >&2
                  exit 2
        fi
#        if [ ];then
#           msg_error "" >&2
#           exit
#        fi
        echo "$VNI $ENV_ID" >> $file_name
        msg_ok "Added $VNI $ENV_ID" >&2
        exit 0
        
    fi 
   if [ "true" == "$delvnivlanMap" ]; then
     tunnelName="$1"
     vni_id="$2"
     vlan_id="$3"
     extra="$4"
     vni_list=()
     vlan_list=()

     if [ -z "$tunnelName" ]; then
        msg_error "Tunnel Name Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
     fi

     if [ -z "$vni_id" ]; then
        msg_error "VNI Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
     fi

     if [ -z "$vlan_id" ]; then
        msg_error "VLAN ID Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
     fi
     if [ "$extra" ]; then
        msg_error "extra Parameter provided. Aborting ..."
        show_usage "`management_network_usage`"
     fi

     tunnel_port=`ovs-ofctl show br-tun|grep $tunnelName|cut -d"(" -f1 | cut -d" " -f2`
     if [[ -z "$tunnel_port" ]]
     then
       msg_fail "Tunnel:$tunnelName not exist! Aborting..."
       exit 1
     fi
     peer_port=`ovs-ofctl show br-tun|grep tunTOint|cut -d"(" -f1 |cut -d" " -f2`
     file_name="/var/subutai-network/"$tunnelName"_vni_vlan"
     if [ ! -d '/var/subutai-network' ]
     then
        msg_error "/var/subutai-network folder not exists! Aborting..."
	exit 1
     fi
     if [ ! -f $file_name ]
     then
        msg_error "$file_name not exists! Aborting..."
        exit 1
     fi
         while read line
    do
        vni=`echo $line | cut -d ' ' -f1`
        vlan=`echo $line | cut -d ' ' -f2`
        vni_list+=($vni)
        vlan_list+=($vlan)
    done < $file_name
    if [[ ${vlan_list[*]} =~ $vlan_id ]] && [[ ${vni_list[*]} =~ $vni_id ]]
    then
      sed -i "/$vni_id $vlan_id/d" $file_name
      ovs-ofctl del-flows br-tun "in_port=$peer_port,dl_vlan=$vlan_id"
      ovs-ofctl del-flows br-tun "in_port=$tunnel_port,tun_id=$vni_id"
      msg_ok "Tunnel: $tunnelName VNI: $vni_id VLAN: $vlan_id Removed..."
    else
      msg_error "Unvalid VNI: $vni_id or VLAN: $vlan_id"
      exit 1
    fi
  fi

  if [ "true" == "$vnivlanMap" ]; then
    tunnelName="$1"
    vni_id="$2"
    vlan_id="$3"
    ENV_ID="$4"
    extra="$5"
    vni_list=()
    vlan_list=()

    if [ -z "$tunnelName" ]; then
        msg_error "Tunnel Name Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
    fi

    if [ -z "$vni_id" ]; then
        msg_error "VNI Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
    fi

    if [ -z "$vlan_id" ]; then
        msg_error "VLAN ID Parameter not provided. Aborting ..."
        show_usage "`management_network_usage`"
    fi

    if [ -z "$ENV_ID" ]; then
        msg_error "ENV ID Parameter not provided. Aborting ..."
        exit 10
#        show_usage "`management_network_usage`"
    fi

      file_name2="/var/subutai-network/vni_reserve"
#      echo "$file_name"
#      cat $file_name
      if [ ! -f "$file_name2" ]; then
            msg_info "No reserved VNIs,not exist file for reserved VNI" >&2
            exit 10
        fi


#    file_name="/var/subutai-network/vni_reserve"
#    cat $file_name
#    if [ ! -f 'file_name' ]; then
#       msg_error "Please do reserve VNI-ENV_ID first" >&2
#       exit 10
#    fi
    check=$(cat $file_name2 | awk -F " " '{print $1 "," $2}' | grep $vni_id,$ENV_ID)
    checkVNI=$(cat $file_name2 | grep $vni_id | awk -F" " '{print $1}')
    checkENV=$(cat $file_name2 | grep $vni_id | awk -F" " '{print $2}')

    checkVNI1=$(cat $file_name2 | grep $ENV_ID | awk -F" " '{print $1}')
    checkENV1=$(cat $file_name2 | grep $ENV_ID | awk -F" " '{print $2}')

#    echo "check=$check"
#    echo "vni=$vni_id,ENV=$ENV_ID"
#    echo "check:  vni=$checkVNI,ENV=$checkENV"
     
    if [ "$checkVNI" == "$vni_id" ] && [ "$checkENV" != "$ENV_ID"  ]; then
       msg_error "VNI reserved for different ENV" >&2
       exit 2
    elif [ "$checkENV1" == "$ENV_ID" ] && [ "$checkVNI1" != "$vni_id" ]; then
       msg_error "ENV reserved for different VNI" >&2
       exit 3
    elif [ -z "$check" ]; then
       msg_error "VNI with ENV not reserved" >&2
       exit 1
    fi

    if [ "$extra" ]; then
        msg_error "extra Parameter provided. Aborting ..."
        show_usage "`management_network_usage`"
    fi
    tunnel_port=`ovs-ofctl show br-tun|grep $tunnelName|cut -d"(" -f1 | cut -d" " -f2`
    if [[ -z "$tunnel_port" ]]
    then
      msg_fail "Tunnel:$tunnelName not exist! Aborting..."
      exit 1
    fi
    peer_port=`ovs-ofctl show br-tun|grep tunTOint|cut -d"(" -f1 |cut -d" " -f2`
    file_name="/var/subutai-network/"$tunnelName"_vni_vlan"
    if [ ! -d '/var/subutai-network' ]
    then
        mkdir -p "/var/subutai-network"
    fi
    if [ ! -f '$file_name' ]
    then
      touch $file_name
    fi
    while read line
    do
        vni=`echo $line | cut -d ' ' -f1`
        vlan=`echo $line | cut -d ' ' -f2`
        vni_list+=($vni)
        vlan_list+=($vlan)
    done < $file_name

    if [[ ${vlan_list[*]} =~ $vlan_id ]] || [[ ${vni_list[*]} =~ $vni_id ]]
    then
      msg_ok "Vlan ID: $vlan_id or VNI: $vni_id is already in use!"
      exit 0
    fi
    ovs-ofctl add-flow br-tun "in_port=$peer_port,dl_vlan=$vlan_id,actions=set_field:$vni_id->tun_id,output:$tunnel_port"
    ovs-ofctl add-flow br-tun "in_port=$tunnel_port,tun_id=$vni_id,actions=set_field:$vlan_id->vlan_vid,output:$peer_port"
    echo "$vni_id $vlan_id $ENV_ID" >> $file_name 
    msg_ok "Tunnel: $tunnelName VNI: $vni_id VLAN: $vlan_id ENV_ID: $ENV_ID"
    exit 0
  fi

}
function management_network_description {
  echo "Create a Tunnel between subutai peers"
  echo "List Opened Tunnels in subutai Host"
  echo "Remove a Tunnel from subutai Host"
  echo "Add a Flow rule "
  echo "Show a Bridge Flow Rules"
  echo "Show a Bridge Port informations"
  echo "Delete a Bridge Flow Rules"
  echo "Create a N2N tunnel"
  echo "List N2N tunnels"
  echo "Remove a N2N tunnel"
  echo "Add a Tennant Gateway"
  echo "Remove a Tennant Gateway" 
  echo "Create VNI-VLAN Mapping on a Tunnel"
  echo "Delete VNI-VLAN Mapping on a Tunnel"
}
