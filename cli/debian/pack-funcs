#!/bin/bash
set -e
usage() {
  echo "Usage: checkPackageVersion {product_name}"
  echo "Usage: generateDebianPackage {product_name}"
  echo "Usage: generateRepoPackage {product_name}"
  exit 1
}

#check debian package version with changelog
checkPackageVersion() {
  productName=$1

  CONTROL="/var/lib/jenkins/jobs/master.get_branch_repo/workspace/$productName/debian/changelog"
  TARGET="/var/lib/jenkins/Automation/Bigdata/$productName"

  version_new=`cat $CONTROL | grep subutai-$productName | awk -F" " '{print $2}'`
  version_new=`echo ${version_new//[()]/}`
  echo "Version= $version_new"
  versionFirst_new=$(echo $version_new | awk -F"." '{print $1}')
  versionSecond_new=$(echo $version_new | awk -F"." '{print $2}')
  version_tmp=$(echo $version_new | awk -F"." '{print $3}')
  versionThird_new=$(echo $version_tmp | awk -F"-" '{print $1}')
  patch_new=$(echo $version_tmp | awk -F"-" '{print $2}')
 
  echo "versionFirst_new= $versionFirst_new"
  echo "versionSecond_new= $versionSecond_new"
  echo "versionThird_new= $versionThird_new"
  echo "patch_new= $patch_new"

  deb_name=`ls -lt $TARGET | awk '{ print $9 }' | grep .deb | head -1`
  version_prev=$(echo $deb_name | awk -F"_" '{print $2}')
  versionFirst_prev=$(echo $version_prev | awk -F"." '{print $1}')
  versionSecond_prev=$(echo $version_prev | awk -F"." '{print $2}')

  version_tmp_prev=$(echo $version_prev | awk -F"." '{print $3}')
  versionThird_prev=$(echo $version_tmp_prev | awk -F"-" '{print $1}')
  patch_prev=$(echo $version_tmp_prev | awk -F"-" '{print $2}')

  if [ -z $patch_prev ]; then
    patch_prev=0
  fi
  if [ -z $patch_new ]; then
    patch_new=0
  fi
  echo "new in order" $versionFirst_new $versionSecond_new $versionThird_new $patch_new
  echo "prev in order" $versionFirst_prev $versionSecond_prev $versionThird_prev $patch_prev

  echo "version in control:$version_new current version:$version_prev "

  if [ $versionFirst_new -lt $versionFirst_prev ]; then
    echo "major: current version is greater than the version in control file. Version in control file:$version_new, current version:$version_prev"
    exit 0;
  elif [ $versionFirst_new -eq $versionFirst_prev ]; then
     if [ $versionSecond_new -lt $versionSecond_prev ]; then
        echo "minor: current version is greater than the version in control file. Version in control file:$version_new, current version:$version_prev"
        exit 0;
     elif [ $versionSecond_new -eq $versionSecond_prev ]; then
        if [ $versionThird_new -lt $versionThird_prev ]; then
            echo "micro: current version is greater than the version in control file. Version in control file:$version_new, current version:$version_prev"
            exit 0;
        elif [ $versionThird_new -eq $versionThird_prev ]; then 
          if [ $patch_new -lt $patch_prev  ]; then
               echo "patch: current version is greater than the version in control file. Version in control file:$version_new, current version:$version_prev"
           		 exit 0;
          elif [ $patch_new -eq $patch_prev  ]; then
               echo "patch: current version is equal to the version in control file. Version in control file:$version_new, current version:$version_prev"
           		 exit 0;
          fi
        fi
     fi
  fi
}

#generate debian package using make
generateDebianPackage() {
  
  productName=$1
  BASE="/var/lib/jenkins/jobs/master.subutai-$productName/Subutai-$productName"
  TARGET="/var/lib/jenkins/Automation/Bigdata/$productName"
  SOURCE="/var/lib/jenkins/jobs/master.get_branch_repo/workspace/$productName" 
  
  pushd $SOURCE
  make package
  cp subutai-$productName-debian-build/*.deb $BASE/
  cp subutai-$productName-debian-build/*.deb $TARGET/
  popd
}

#generate repo wrapper package
generateRepoPackage() {
  #check initial productName is not empty
  if [[ $1 == "" ]]; then
    usage
  fi
  #Basic path definitions
  productName=$1

  BASE=/var/lib/jenkins/jobs/master.subutai-$productName/Subutai-$productName
  TARGET="/var/lib/jenkins/Automation/Bigdata/$productName"
  PACK="/var/lib/jenkins/Automation/Automation_ISO/mgmt-repo/template-repo-package/"
  ISOPATH="/var/lib/jenkins/Automation/Automation_ISO/work/custom-iso/pool/extras/"
 
  pushd $BASE

  #get latest package from ISOPATH to remove it
  removedPackage=`ls -lt $ISOPATH | grep "subutai-repo-$productName_" | awk '{ print $9 }' | grep .deb | head -1`
  echo "removedPackageName: $removedPackage" 
  if [ "$removedPackage" != "" ]; then
      rm $ISOPATH/$removedPackage
  fi

  #get package full name, for example:subutai-cli_1.0.150_all.deb
  currentPackage=`ls -lt $TARGET | awk '{ print $9 }' | grep .deb | head -1` 
  echo "CurrentPackageName: $currentPackage"
  
  #delete repo package: subutai-repo-hadoop_1.0.12_all.deb
  if [ -f "$ISOPATH/subutai-repo-$currentPackage" ]; then
      rm $ISOPATH/subutai-repo-$currentPackage 
  fi
  
  if [ "$productName" = "cli-management" ]; then
     #remove cli-management package from pool/extras
     removedPackage=`ls -lt $ISOPATH | grep "subutai-$productName" | awk '{ print $9 }' | grep .deb | head -1`
     echo "removedPackageName: $removedPackage" 
     if [ ! -z "$removedPackage" ]; then
        rm $ISOPATH/$removedPackage
     fi
     #copy debian package to pool/extras
     cp $BASE/subutai-cli-management*.deb $ISOPATH/
  fi
  
  #check package starts with subutai tag
  if [[ "$currentPackage" == "subutai"* ]]; then
     shortCurrentPackage=`echo "$currentPackage" | awk '{print substr($1,9); }'  | awk '{print substr($0, 0, length($0)-4)}'`
     echo "shortCurrentPackage: $shortCurrentPackage"
  fi

  purePackageName=`echo $shortCurrentPackage | awk -F "." '{print $1}' | awk '{print substr($0, 0, length($0)-2)}'`
  echo "purePackageName: $purePackageName"
 
  #check purePackageName is empty or not
  if [ -z $purePackageName ] || [ "x$purePackageName" == "x" ]; then
     echo "Pure package name is empty. Aborting..."
     exit 1
  fi

  templateName="temp"

  #check temp folder does exist or not
  if [ -d "$templateName" ]; then
    rm -rf "$BASE/$templateName"
  fi
    cp -a $PACK $BASE/$templateName
  
  sed -i "s/template/subutai-repo-$purePackageName/g" $BASE/$templateName/DEBIAN/control
  cp $currentPackage $BASE/$templateName/repo/ksks/amd64/trusty/
  mv $BASE/$templateName/ $BASE/subutai-repo-$shortCurrentPackage
  
  CURRENTPACK=$BASE/subutai-repo-$shortCurrentPackage
  echo "CURRENTPACK: $CURRENTPACK"

  dpkg-deb --build $CURRENTPACK
  mv $BASE/subutai-repo-"$shortCurrentPackage".deb $ISOPATH
  rm -rf $BASE/subutai-repo-$shortCurrentPackage
  rm -rf $BASE/$templateName

  echo "Repo wrapper package Successfully created."
  popd
}

