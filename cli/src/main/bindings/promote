#!/bin/bash


function promote_usage {
  echo -----------------------------------------------------------------------
  echo Usage: Converts an instance container into a template
  echo
  echo "        "subutai \[-qh\] promote container \[\[-c\] -n new_container_name\] \[-b pre-execution-scripts\|\"all\"\] 
  echo
  echo -----------------------------------------------------------------------
}


# Plan for creating a template from a container
# ---------------------------------------------------------------------------
# (1) perform sanity checks first
#     - container MUST exist
#     - container MUST NOT have a 'template' snapshot
#     - container name MUST NOT be in the template registry
#     - container parent MUST be present in the template registry
# (2) replace package manifest next to config file
# (3) commit config point changes and push to site git as new branch from parent
# (4) shutdown & '@template' snapshot all mounts, and apply "keep" holds

function promote {
  if [ "`is_system_locked`" == "true" ]
  then
     msg_error "System locked by a subutai process"
     exit 1
  fi

  OPTIND=0
  if [ "$1" == "promote" ]; then
    shift
  fi

  local lxc="$1"
  lxc_assert "$lxc" "`promote_usage`"

  if [ $1 = $lxc ]; then
    shift
  fi

  copyit="false"
  newname=""


  while getopts ":cn:b:" opt; do
    case $opt in
      n)
        newname="$OPTARG"
        ;;
      c)
        copyit="true"
        ;;
      b)
        preScriptsEnabled="true"
        preScripts=$OPTARG
        ;;
      :)
        msg_error "Option -$OPTARG requires an argument"
        exit 1
        ;;
      \?)
        msg_error "Unrecognized option -$OPTARG"
        exit 1
        ;;
    esac
  done
 
  if [ "$copyit" == "true" -a -z "$newname" ]; then
    msg_error "Cannot use -c option without -n option"
    exit 1
  fi

  if [ "$TEST_MODE" == "true" ]; then
    echo ---- TEST_MODE DUMP ----
    echo -e "optind\t= $OPTIND"
    echo -e "operand count\t= $#"
    echo -e "operands\t= $@"
    echo -e "newname\t= $newname"
    echo -e "copyit\t= $copyit"
    echo -e "prescripts\t= $preScripts"
    echo
  fi
  
  if [ "`are_containers_writable $lxc`" == "true" ]
  then
     msg_error "Container(s) locked by a subutai process"
     exit 1
  fi
 
  lock_container_read $lxc
  if [ $? != 0 ]; then msg_error "Containers cannot be locked!"; exit 1; fi

  # The master is already a template
  if [ "$lxc" == "master" ]; then
    msg_error "The master is already a template. Aborting ..."
    unlock_container_read $lxc
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  fi

  # ---------------------------------------------------------------------------
  # (1) perform some sanity checks
  # ---------------------------------------------------------------------------

  # check to make sure the container is NOT already a template
  if [ "`zfs_is_template $lxc`" == "true" ]; then
    msg_error "Container \"$lxc\" is already a template. Aborting ..."
    unlock_container_read $lxc
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  else
    msg_info "    - check passed: \"$lxc\" is NOT a template"
  fi
  templatename="$lxc"
  if [ -n $newname ] && [ "x$newname" != "x" ]; then
    templatename="$newname"
    lxc_assert_no "$templatename" "`promote_usage`"
  fi
  # check to make sure container is NOT registered as a template
  if [ "`is_registered $templatename`" == "true" -a "x$SUBUTAI_OFFLINE_MODE" != "xtrue" ]; then
    msg_error "A template with name \"$templatename\" is registered. Aborting ..."
    unlock_container_read $lxc
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  else
    msg_info "    - check passed: \"$templatename\" is NOT registered"
  fi

  parent=`zfs_get_parent $lxc`
  lxc_assert $parent
  # check to make sure the parent is a template
  if [ "`zfs_is_template $parent`" == "false" ]; then
    msg_error "Parent \"$parent\" is NOT a template. Aborting ..."
    unlock_container_read $lxc
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  else
    msg_info "    - check passed: parent \"$parent\" is a template"
  fi

  # TODO is this check really necessary while promoting a child container?? 
  # User may have promoted the parent but may not have registered yet!
  # check to make sure the parent is registered
  #if [ "`is_registered $parent`" == "false" ]; then
  #  msg_error "Parent \"$parent\" is NOT registered. Aborting ..."
  #  exit 1
  #else
  #  msg_info "    - check passed: parent \"$parent\" is registered"
  #fi

  # if a newname is specified check to see such a container does not exist
  # make a copy of the container before converting it into a template
  if [ -n "$newname" -a "true" == "$copyit" ]; then
    lxc_stop "$lxc"
    lxc_copy "$lxc" "$newname"
    lxc_template="$newname"
  elif [ -n "$newname" -a "false" == "$copyit" ]; then
    lxc_stop "$lxc"
    lxc_rename "$lxc" "$newname"
    lxc_template="$newname"
  else
    lxc_template="$lxc"
  fi

  # start container if it is stopped
  if [ -z "`lxc-ls --running | grep $lxc_template`" ]; then
    lxc-start -d -n $lxc_template
  fi

  # ---------------------------------------------------------------------------
  # (2) replace package manifest next to config file
  # ---------------------------------------------------------------------------
  if [ "x$preScriptsEnabled" == "xtrue" ]; then
    if [ "x$preScripts" == "xall" ]; then
      execute_all_prescripts "${FUNCNAME[0]}" $lxc_template
    else
      execute_prescripts "$preScripts" $lxc_template
    fi
  fi

  lxc_remove_agent $lxc_template
  lxc_home=/var/lib/lxc/$lxc_template
  for debpkg in "`lxc-attach -n $lxc_template -- dpkg -l`"; do
    echo "$debpkg" >> $lxc_home/packages
  done
  # ---------------------------------------------------------------------------
  # (3) git operations
  # ---------------------------------------------------------------------------
  # add and commit all uncommitted files (should be some: /etc/hosts)
  if [ -n "$newname" ]; then
    o=$(git_rename_branch $lxc $lxc_template > /dev/null 2>&1)
  fi

  uuid=`git_add_commit $lxc_template`
  
  # inject the commit UUID 
  echo "subutai.git.uuid = $uuid" >> $lxc_home/config
  msg_info "    - commit UUID extracted: $uuid"

  # push to the subutai site git repository is handled by register subcommand

  # ---------------------------------------------------------------------------
  # (4) shutdown & '@template' snapshot all mounts, and apply "keep" holds
  # ---------------------------------------------------------------------------

  lxc-stop -n $lxc_template
  #deleting related veth pair port from ovs
  ovs_port_name=$(ovs_get_port_name $lxc_template)
  ovs-vsctl --if-exist del-port br-int "$ovs_port_name-1" > /dev/null 2>&1
  ovs-vsctl --if-exist del-port br-int "$ovs_port_name-2" > /dev/null 2>&1
  ovs_revert_configuration $lxc_template

  zfs snapshot lxc/$lxc_template@template
  zfs hold keep lxc/$lxc_template@template
  zfs set readonly=on lxc/$lxc_template

  zfs snapshot lxc/$lxc_template-opt@template
  zfs hold keep lxc/$lxc_template-opt@template
  zfs set readonly=on lxc/$lxc_template-opt

  zfs snapshot lxc-data/$lxc_template-var@template
  zfs hold keep lxc-data/$lxc_template-var@template
  zfs set readonly=on lxc-data/$lxc_template-var

  zfs snapshot lxc-data/$lxc_template-home@template
  zfs hold keep lxc-data/$lxc_template-home@template
  zfs set readonly=on lxc-data/$lxc_template-home

  msg_ok "Successfully promoted $lxc_template"
  unlock_container_read $lxc
  if [ $? != 0 ]; then msg_error "Release read lock of $lxc"; exit 1; fi
}


function promote_description {
  echo promotes an instance container into a template
}


