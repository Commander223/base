#!/bin/bash


function quota_usage {
  echo -----------------------------------------------------------------------
  echo Usage: Quota management of containers.
  echo
  echo "        "subutai \[-qh\] quota container \[resource_type \[-s quota_value\|-m\] \| output_type\]
  echo "           "resource_types:
  echo "                             "ram -- quota for memory \(in megabytes\)
  echo "                             "cpu -- quota for cpu \(in percentage\)
  echo "                             "cpuset -- quota for cpusets
  echo "                             "diskHome\|diskOpt\|diskVar\|diskRootfs\] -- quota for disk datasets \(no default units, can be \"none\" or in K\|M\|G\|T\|P\|E\|... \)
  echo "           "output_types:
  echo "                             "json -- prints all quota related information in json format
  echo "           "flags:
  echo "                "s -- set quota for the specified resource_type
  echo "                "m -- get the maximum quota can be set to the specified container and resource_type in their default units.
  echo -----------------------------------------------------------------------
}

function quota {
  OPTIND=0
  if [ "$1" == "quota" ]; then
    shift
  fi

  if [[ -z $1 ]]; then
    quota_usage
    exit 1;
  fi


  local container=$1
  local resource_type=$2
  lxc_assert "$container" "`quota_usage`" > /dev/null

  if [[ -z $resource_type ]]; then
    msg_error "Resource type is not provided. Aborting..."
    quota_usage
    exit 1;
  fi

  local set_quota="false"
  local get_maximum_available_quota="false"
  shift
  shift
  while getopts ":s:m" opt; do
    case $opt in
      s)
        set_quota="true"
        quota_value="$OPTARG"
        ;;
      m)
        get_maximum_available_quota="true"
        ;;
      \?)
        msg_error "Unrecognized option -$OPTARG"
        exit 1
        ;;
      :)
        msg_error "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done

  if [ "x$set_quota" == "xtrue" ]; then
    case $resource_type in
      "ram" )
        # If the parameter for ram metric does not have K,M,G letters
        # then set the default value to M which causes to be tread as megabytes
        if [ "`is_number $quota_value`" == "true" ]; then
          local quota_value=$quota_value"M"
        fi
        lxc_set_memory $container $quota_value
        ;;
      "cpuset" )
        lxc_set_cpus $container $quota_value
      ;;
      "cpu")
        lxc_set_cpu_quota $container $quota_value
      ;;
      "diskHome" )
        fs_set_quota $container "home" $quota_value
      ;;
      "diskVar")
        fs_set_quota $container "var" $quota_value
      ;;
      "diskOpt")
        fs_set_quota $container "opt" $quota_value
      ;;
      "diskRootfs")
        fs_set_quota $container "rootfs" $quota_value
      ;;
      *)
        msg_error "$resource_type is not a supported type! Aborting.."
        exit 1
    esac
  elif [ "x$get_maximum_available_quota" == "xtrue" ]; then
    case $resource_type in
      "ram" )
        get_total_usable_ram_in_megabytes $container
        ;;
      "diskHome" )
        fs_get_total_usable_quota_readable $container "home"
      ;;
      "diskVar")
        fs_get_total_usable_quota_readable $container "var"
      ;;
      "diskOpt")
        fs_get_total_usable_quota_readable $container "opt"
      ;;
      "diskRootfs")
        fs_get_total_usable_quota_readable $container "rootfs"
      ;;
      *)
        msg_error "$resource_type is not a supported type for maximum available quota! Aborting.."
        exit 1
    esac
  else
    case $resource_type in
      "ram" )
        lxc_get_memory_in_megabytes $container
      ;;
      "cpuset")
        lxc_get_cpus $container
      ;;
      "cpu")
        lxc_get_cpu_quota $container
      ;;
      "diskHome")
        fs_get_quota $container "home"
      ;;
      "diskVar")
        fs_get_quota $container "var"
      ;;
      "diskOpt")
        fs_get_quota $container "opt"
      ;;
      "diskRootfs")
        fs_get_quota $container "rootfs"
      ;;
      "json")
        local memory_value=$(lxc_get_memory_in_megabytes $container)
        local memory_value=$( [ -z $memory_value ] &&  echo "none" || echo $memory_value )

        local cpu_value=$(lxc_get_cpu_quota $container)
        local cpu_value=$( [ -z $cpu_value ] && echo "none" || printf "\"$cpu_value\"" )

        local hdd_home_value=$(fs_get_quota $container "home")
        local hdd_var_value=$(fs_get_quota $container "var")
        local hdd_opt_value=$(fs_get_quota $container "opt")
        local hdd_rootfs_value=$(fs_get_quota $container "rootfs")
        printf "{ram=$memory_value,cpu=$cpu_value,diskHome=$hdd_home_value, diskVar=$hdd_var_value, diskOpt=$hdd_opt_value, diskRootfs=$hdd_rootfs_value}"
      ;;
      *)
        msg_error "$resource_type is not a supported type! Aborting.."
        exit 1
    esac
  fi
}


function quota_description {
  echo sets and gets container quotas;
}


