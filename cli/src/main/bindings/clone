#!/bin/bash


function clone_usage {
  echo -----------------------------------------------------------------------
  echo Usage: Clone a new container instance from a temlate.
  echo
  echo "        "subutai \[-qh\] clone parent child \[-e environmentId\] \[-a \[post-execution-scripts\|\"all\"\] \[-m\] \]
  echo "          "parameters:
  echo "                    "e -- set environment id for container
  echo "                    "m -- starts monitoring of container
  echo "                    "a -- after cloning container run the specified scripts
  echo "		    "N -- User Name for Key
  echo "		    "M -- Email Address for Key
  echo
  echo -----------------------------------------------------------------------
}


function clone {
  if [ "`is_system_locked`" == "true" ]
  then
     msg_error "System locked by a subutai process"
     exit 1
  fi

  if [ ! -f /usr/share/subutai-cli/subutai/pre-scripts/key_generate ]; then
     msg_error "GPG generation Script not located as /usr/share/subutai-cli/subutai/pre-scripts/key_generate !"
     exit 1
  fi

  local parent="$1"
  local child="$2"

  # Check that parent exists
  lxc_assert "$parent" "`clone_usage`"
  # Check that container name is legal and it does not exist
  lxc_assert_name $child
  lxc_assert_no $child

  config=/var/lib/lxc/$child/config

  if [ "`are_containers_readable $parent $child`" == "true" ]
  then
     msg_error "Container(s) locked by a subutai process"
     exit 1
  fi

  OPTIND=0
  if [ "$2" == $child ]; then
    shift
    shift
  fi

  #getting environmentId using getopts
  local environmentId=""
  local monitor_enabled="false"
  shift_amount=0;
  while getopts ":e:a:N:M:m" opt; do
    case $opt in
      e)
        environmentId=$OPTARG
        ;;
      a)
        postScriptsEnabled="true"
        postScripts=$OPTARG
        ;;
      N)
	gpgpub="true"
        realName="$OPTARG"
        ;;
      M)
	gpgpub="true"
        email="$OPTARG"
        ;;
      m)
        monitor_enabled="true"
        ;;
      \?)
        msg_error "Unrecognized option -$OPTARG"
        exit 1
        ;;
      :)
        msg_error "Option -$OPTARG requires an argument." >&2
        exit 1
    esac
    shift_amount=$(($shift_amount + 1))
  done

  if [ "$gpgpub" == "true" ]; then
    if [[ -n "$realName" && -n "$email" ]]; then
       msg_info "    - Keys will be generated in container!"
    else
       msg_error "    - Name and Email Address should not be empty!"
       exit 1
    fi
  fi

  lock_container_write $parent $child
  if [ $? != 0 ]; then msg_error "Containers cannot be locked!"; exit 1; fi

  # NOTE: underscore for our own lxc clone impl not supplied lxc-clone
  if [ -z "$environmentId" ]; then
    environmentId="null"
  fi

  #cloning operation is starting..
  lxc_clone $parent $child $environmentId "`clone_usage`"

  ovs_configure_lxc $child
  git_child_branch $child

  if [ "x$postScriptsEnabled" == "xtrue" ]; then
    if [ "x$postScripts" == "xall" ]; then
      execute_all_postscripts "${FUNCNAME[0]}" $child
    else
      execute_postscripts "$postScripts" $child
    fi
  fi

  if [ $monitor_enabled == "true" ]; then
    create_all_rrd "$child"
  fi

  if [ "$gpgpub" == true ]; then
    cp /usr/share/subutai-cli/subutai/pre-scripts/key_generate /var/lib/lxc/$child/rootfs/etc/init.d
    (lxc-attach -n $child -- /etc/init.d/key_generate $realName $email ) > /dev/null 2>&1
    local pubKey=`lxc-attach -n $child -- gpg --list-keys | grep pub | awk '{print $2}' | awk -F"/" '{print $2}'`
    gpg2 --keyserver $SUBUTAI_REST_IP --recv-key $pubKey > /dev/null 2>&1
    local RHpub=`(gpg2 --list-keys | grep -B 1 '\] ' |  awk '{print $2}' | awk -F"/" '{print $2}') 2>/dev/null`
    RHpub=`echo $RHpub | awk '{print $1}'`
    gpg2 -u $RHpub --yes --batch --sign-key $pubKey > /dev/null 2>&1
    gpg2 --keyserver $SUBUTAI_REST_IP --send-keys $pubKey > /dev/null 2>&1
    gpg2 --yes --batch --delete-keys $pubKey > /dev/null 2>&1
    lxc-attach -n $child -- gpg --keyserver $SUBUTAI_REST_IP --recv-keys $pubKey > /dev/null 2>&1
  fi
  msg_ok "Successfully cloned $child container from $parent"
  unlock_container_write $child
  if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
}

function clone_description {
  echo clones an instance container from a template
}

