#!/bin/bash


function demote_usage {
  echo -----------------------------------------------------------------------
  echo Usage: Demotes a temlate back into a container instance.
  echo
  echo " "subutai \[-qh\] demote template \[-i Network Configuration\]
  echo "             "parameters:
  echo "                "i -- set network configuration i.e. "192.168.1.2/24 100"
  echo -----------------------------------------------------------------------
}


function demote {
  if [ "`is_system_locked`" == "true" ]
  then
     msg_error "System locked by a subutai process"
     exit 1
  fi

  local temp="$1"

  if [ "`are_containers_writable $temp`" == "true" ]
  then
     msg_error "Container(s) locked by a subutai process"
     exit 1
  fi

  OPTIND=0
  if [ "$1" == $temp ]; then
    shift
  fi

  local network_enabled="false"
  local network_properties=""
  shift_amount=0;
  while getopts ":i:" opt; do
    case $opt in
      i)
	network_enabled="true"
        network_properties=$OPTARG
        ;;
      \?)
        msg_error "Unrecognized option -$OPTARG"
        exit 1
        ;;
      :)
        msg_error "Option -$OPTARG requires an argument." >&2
        exit 1
    esac
      shift_amount=$(($shift_amount + 1))
  done

  lock_container_read $temp
  if [ $? != 0 ]; then msg_error "Containers cannot be locked!"; exit 1; fi

  #check for master	
  if [ "x$temp" == "xmaster" ]; then
    msg_error "Master templated cannot be demoted. Aborting ..."
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  fi

  # check to make sure we have a template name - usage if not
  if [ -z "$temp" ]; then
    msg_error "Template argument not provided. Aborting ..."
    unlock_container_read $temp
    show_usage "`demote_usage`"
  fi

  # various sanity checks: lxc exists, it's a template, no kids, not registered
  lxc_assert "$temp"
  if [ "false" == "`fs_is_template $temp`" ]; then
    msg_error "Supplied template name \"$temp\" is not a template. Aborting ..."
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  fi

  fs_get_children "$temp"
  local child_count="$?"
  if [ "$child_count" -gt 0 ]; then
    msg_error "Template \"$temp\" cannot be demoted with $child_count children."
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  elif [ "true" == "`is_registered $temp`" ]; then
    msg_error "Cannot demote registered template \"$temp\""
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  else
    msg_info "    - Demoting template \"$temp\" with no children."
  fi

  fs_demote_template $temp
  ovs_configure_lxc $temp
  msg_ok "Successfully demoted $temp"
  unlock_container_read $temp
  if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
  
  if [ "$network_enabled" == "true" ]; then
     subutai network $temp -s ${network_properties//\"} #"192.168.3.2/24 100" varible should be like this
  fi

}


function demote_description {
  echo demotes a template back to an instance container
}

