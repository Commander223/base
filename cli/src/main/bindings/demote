#!/bin/bash


function demote_usage {
  echo -----------------------------------------------------------------------
  echo Usage: Demotes a temlate back into a container instance.
  echo
  echo "        "subutai \[-qh\] demote template
  echo
  echo -----------------------------------------------------------------------
}


function demote {
  if [ "`is_system_locked`" == "true" ]
  then
     msg_error "System locked by a subutai process"
     exit 1
  fi

  local temp="$1"

  if [ "`are_containers_writable $temp`" == "true" ]
  then
     msg_error "Container(s) locked by a subutai process"
     exit 1
  fi

  lock_container_read $temp
  if [ $? != 0 ]; then msg_error "Containers cannot be locked!"; exit 1; fi

  #check for master	
  if [ $temp == "master" ]; then
    msg_error "Master templated cannot be demoted. Aborting ..."
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  fi

  # check to make sure we have a template name - usage if not
  if [ -z "$temp" ]; then
    msg_error "Template argument not provided. Aborting ..."
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    show_usage "`demote_usage`"
  fi

  # various sanity checks: lxc exists, it's a template, no kids, not registered
  lxc_assert "$temp"
  if [ "false" == "`zfs_is_template $temp`" ]; then
    msg_error "Supplied template name \"$temp\" is not a template. Aborting ..."
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  fi

  zfs_get_children "$temp"
  local child_count="$?"
  if [ "$child_count" -gt 0 ]; then
    msg_error "Template \"$temp\" cannot be demoted with $child_count children."
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  elif [ "true" == "`is_registered $temp`" -a "x$SUBUTAI_OFFLINE_MODE" != "xtrue"]; then
    msg_error "Cannot demote registered template \"$temp\""
    unlock_container_read $temp
    if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
    exit 1
  else
    msg_info "    - Demoting template \"$temp\" with no children."
  fi

  # actual code to demote the template here
  local lxc_path="/var/lib/lxc/$temp"
  cat $lxc_path/config | \
    grep -v "lxc.hook.pre-start" | \
    grep -v "subutai.template.package" | \
    grep -v "subutai.git.uuid" >> $lxc_path/config.new
  rm $lxc_path/config
  mv $lxc_path/config.new $lxc_path/config
 
  local var_snap="lxc-data/$temp-var@template"
  zfs release keep "$var_snap"
  zfs destroy "$var_snap"
  zfs set readonly=off "lxc-data/$temp-var"

  local home_snap="lxc-data/$temp-home@template"
  zfs release keep "$home_snap"
  zfs destroy "$home_snap"
  zfs set readonly=off "lxc-data/$temp-home"

  local opt_snap="lxc/$temp-opt@template"
  zfs release keep "$opt_snap"
  zfs destroy "$opt_snap"
  zfs set readonly=off "lxc/$temp-opt"

  local root_snap="lxc/$temp@template"
  zfs release keep "$root_snap"
  zfs destroy "$root_snap"
  zfs set readonly=off "lxc/$temp"

  msg_ok "Successfully demoted $temp"
  unlock_container_read $temp
  if [ $? != 0 ]; then msg_error "Container(s) cannot be unlocked!"; exit 1; fi
}


function demote_description {
  echo demotes a template back to an instance container
}

