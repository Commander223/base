#!/bin/bash


function export_usage {
  echo -----------------------------------------------------------------------
  echo Usage: Exports a template as a debian pkg
  echo
  echo "        "subutai export template
  echo
  echo -----------------------------------------------------------------------
}


# Plan for exporting a template
# -----------------------------------------------------------------------------
# (1) perform sanity checks first
#     - defer exports of master to the subutai-master-export script
#     - template container MUST exist
#     - container MUST be a template with the '@template' snapshot
#     - container parent MUST be present in the template registry
# (2) generate delta images of all filesystems: 
#     'pool/parent-partition@child' -> 'pool/child-partition@template'
# (3) generate the debian file deltas, and package info

function export {
  local container="$1"

  # ----------------------------------------------------------------------------
  # (1) perform some sanity checks
  # ----------------------------------------------------------------------------

  lxc_assert $container "`usage`"

  if [ "$container" == "master" ]; then
    subutai master_export
    exit $?
  fi

  local debian_package_name=`get_debian_package_name $container`
  local debian_file="$SUBUTAI_TMPDIR/$debian_package_name.deb"

  if [ -f $debian_file ]; then
    msg_error "It seems the debian file has already been generated"
    msg_error "Destroy $SUBUTAI_TMPDIR/$container and the peer debian file first"
    exit 1
  fi

  parent=`zfs_get_parent $container`
  lxc_assert $parent
  # check to make sure the parent is a template
  if [ "`zfs_is_template $parent`" == "false" ]; then
    msg_error "Parent \"$parent\" is NOT a template. Aborting ..."
    exit 1
  else
    msg_info "    - check passed: parent \"$parent\" is a template"
  fi

  # check to make sure the parent is registered
  if [ "`is_registered $parent`" == "false" ]; then
    msg_error "Parent \"$parent\" is NOT registered. Aborting ..."
    exit 1
  else
    msg_info "    - check passed: parent \"$parent\" is registered"
  fi

  # ----------------------------------------------------------------------------
  # (2) generate delta images of all filesystems: 
  #     'pool/parent-partition@child' -> 'pool/child-partition@template'
  # ----------------------------------------------------------------------------

  debian_root="$SUBUTAI_TMPDIR/$container"
  deltas="$debian_root/deltas"
  mkdir -p $deltas
  zfs send -I "lxc/$parent@template" "lxc/$container@template" > "$deltas/rootfs.delta"
  zfs send -I "lxc/$parent-opt@template" "lxc/$container-opt@template" > "$deltas/opt.delta"
  zfs send -I "lxc-data/$parent-var@template" "lxc-data/$container-var@template" > "$deltas/var.delta"
  zfs send -I "lxc-data/$parent-home@template" "lxc-data/$container-home@template" > "$deltas/home.delta"


  # ----------------------------------------------------------------------------
  # (3) generate the debian file from deltas, and package info
  # ----------------------------------------------------------------------------

  cp /var/lib/lxc/$container/config $debian_root
  cp /var/lib/lxc/$container/fstab  $debian_root
  cp /var/lib/lxc/$container/packages  $debian_root

  pkg=`deb_pkg $container`

  # Remove debian root directory after debian package generation
  rm -rf $debian_root
}


function export_description {
  echo export a template
}


