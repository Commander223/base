#!/bin/bash

# ==========================================================================
# Set of functions that configures openvswitch related stuff
# ==========================================================================

function ovs_configure_lxc {
  local lxc="$1"
  if [ -z $lxc ]; then
    msg_error "lxc name cannot be empty. Aborting!"
    unlock_container_read $1
    exit 1
  fi

  if [ "x$OVS_DISABLED" == "xtrue" ]; then
    return
  fi

  config="/var/lib/lxc/$lxc/config"

  # Remove configuration entries for network.(type,flags,link,veth.pair,script.up)
  sed -i '/lxc.network.type.*/d' $config
  sed -i '/lxc.network.flags.*/d' $config
  sed -i '/lxc.network.link.*/d' $config
  sed -i '/lxc.network.veth.pair.*/d' $config
  sed -i '/lxc.network.script.up.*/d' $config

  # Insert ovs configuration
  ovs_port_name=$(ovs_get_port_name $lxc)
  add_before_line="lxc.network.hwaddr"
  # Add these before the above line
  sed -i "/$add_before_line/i \lxc.network.type = veth" $config
  sed -i "/$add_before_line/i \lxc.network.flags = up" $config
  sed -i "/$add_before_line/i \lxc.network.veth.pair = $ovs_port_name-2" $config
  sed -i "/$add_before_line/i \lxc.network.mtu = 1340" $config
  sed -i "/$add_before_line/a \lxc.network.script.up = $subutai_script_base/create_ovs_interface" $config
  sed -i 's/^lxc.network.hwaddr/#lxc.network.hwaddr/' $config
  msg_info "    - configured $lxc's network with openvswitch"
}


function ovs_revert_configuration {
  local lxc=$1
  if [ -z "$lxc" ]; then
    msg_error "No value provided for container's name. Aborting ..."
    unlock_container_read $lxc
    show_usage "$usage"
  fi

  if [ "x$OVS_DISABLED" == "xtrue" ]; then
    return
  fi

  config="/var/lib/lxc/$lxc/config"
  gwup="/var/lib/lxc/$container/rootfs/etc/network/if-up.d/upstart"

  # Remove configuration entries for network.(type,flags,link,veth.pair,script.up)
  sed -i '/lxc.network.type.*/d' $config
  sed -i '/lxc.network.flags.*/d' $config
  sed -i '/lxc.network.link.*/d' $config
  sed -i '/lxc.network.veth.pair.*/d' $config
  sed -i '/lxc.network.script.up.*/d' $config
  sed -i '/lxc.network.mtu.*/d' $config
  sed -i '/lxc.network.ipv4.*/d' $config
  sed -i '/#vlan_id.*/d' $config
  sed -i '/route add default gw/d' $gwup
  # Insert default network configurations
  add_before_line="lxc.network.hwaddr"
  sed -i "/$add_before_line/i \lxc.network.type = veth" $config
  sed -i "/$add_before_line/i \lxc.network.flags = up" $config
  sed -i "/$add_before_line/i \lxc.network.link = lxcbr0" $config

  msg_info "    - revert back $lxc's network configuration"
}


function ovs_get_port_name {
  local lxc=$1
  if [ -z "$lxc" ]; then
    msg_error "No value provided for container's name. Aborting ..."
    unlock_container_read $lxc
    show_usage "$usage"
  fi
  
  # get macaddress_of_container to initialize ovs bridges' name
  macaddress_of_container=`cat /var/lib/lxc/$lxc/config | grep lxc.network.hwaddr | cut -d "=" -f 2 | tr -d ' '`
  #Remove ':' characters from macaddress to initialize ovs_bridges
  ovs_port_name=`echo $macaddress_of_container | tr -d ':'`
  echo "$ovs_port_name"
}


# returns interfaces with a whitespace seperated
function ovs_get_interfaces {
  local container=$1
  lxc_assert $container > /dev/null
  local config="/var/lib/lxc/$container/config"
  local interface_list=$(cat $config | grep lxc.network.veth.pair | cut -d '=' -f2 | tr -d " ")
  echo $interface_list
}


# sets the specified rate to each interface defined
# inside the container's config file
# default units is in kbps
function network_set_rate_quota {
  local container=$1
  local network_rate=$2

  if [ "x$OVS_DISABLED" == "xtrue" ]; then
    return
  fi

  lxc_assert $container > /dev/null

  local burst=$(echo $network_rate/10 | bc)
  local interfaces=$(ovs_get_interfaces $container)

  # set the specified network rate for each interface
  IFS=' ' read -a interface_array <<< "$interfaces"
  for interface in "${interface_array[@]}"
  do
    ovs-vsctl set interface $interface ingress_policing_rate=$network_rate
    ovs-vsctl set interface $interface ingress_policing_burst=$burst
  done
}


# As all the quotas for each dataset are set to the same value
# it returns the first interface's quota for network rate
function network_get_rate_quota {
  local container=$1

  if [ "x$OVS_DISABLED" == "xtrue" ]; then
    return
  fi
  lxc_assert $container > /dev/null
  local interfaces=$(ovs_get_interfaces $container)
  IFS=' ' read -a interface_array <<< "$interfaces"

  local first_interface=$(echo "${interface_array[0]}")
  ovs-vsctl list interface $first_interface | grep "ingress_policing_rate" | cut -d ':' -f2 | tr -d ' '
}
