#!/bin/bash

# --------------------------------------------------------------------------
# Bunch-O deb package convenience operations
# --------------------------------------------------------------------------


# creates a debian package for a template and its associated files
# arg $1 = name of the container, template etc
# should echo out the path to the newly generated deb package file
#
# notes:
#   - the tmp_path variable is where all the files have been collected
#     that need to be packaged and distributed within the deb pkg
#   - the following files and directory structure exist:
#      .
#      ├── config
#      ├── deltas
#      │   ├── home.delta
#      │   ├── opt.delta
#      │   ├── rootfs.delta
#      │   └── var.delta
#      ├── fstab
#      └── packages
#
#   - all template deb packages must depend on host-scripts package
#   - post installation of the package should call subutai-import
#   - installation should dump package contents under the $tmp directory
#     into a new directory with the name of the container: the import
#     command will expect this file structure to import the newly installed
#     container

#	
#	NOTE: Debian package will be created under $SUBUTAI_TMPDIR directory
#

function deb_pkg {
  local lxc="$1"
  
  if [ -z "$lxc" ]; then
    msg_error "lxc name not provided. Aborting ..."
    exit 1
  fi

  local tmp="$SUBUTAI_TMPDIR"
  local tmp_path="$tmp/$lxc"
  local debian_package_name=`get_debian_package_name $lxc`
  local debian_dir=$SUBUTAI_TMPDIR/$debian_package_name
  local debian_copy_dir=$debian_dir/$tmp_path
  # ----------------------------------------------------------------------------
  # (1) create DEBIAN folder and copy required files.
  # ----------------------------------------------------------------------------
  # Delete debian directory if exists and create it from scratch
  rm -rf $debian_dir
  mkdir -p $debian_dir/DEBIAN
  
  # Copy required files under relevant directories
  mkdir -p $debian_copy_dir
  cp -r $tmp_path/* $debian_copy_dir

  # ----------------------------------------------------------------------------
  # (2)  create control file of debian package
  # ----------------------------------------------------------------------------
  create_control_file $lxc $debian_dir

  # ----------------------------------------------------------------------------
  # (3) create postinst script of debian package
  # ----------------------------------------------------------------------------
  create_postinst_script $debian_dir

  # ----------------------------------------------------------------------------
  # (4) create debian package
  # ----------------------------------------------------------------------------
  dpkg-deb -z8 -Zgzip --build $debian_dir >> /dev/null
  check_status "Template \"$lxc\" Debian package generation" "$?"

  # ----------------------------------------------------------------------------
  # (5) remove copied directories for creating debian package
  # ----------------------------------------------------------------------------		
  rm -rf $debian_dir

  # ----------------------------------------------------------------------------
  # (6) return path of newly generated debian package
  # ----------------------------------------------------------------------------
  
  conf="/var/lib/lxc/$lxc/config"
  propline="`cat $conf | grep subutai.template.package`"

  if [ -z "$propline" ]; then
    echo "subutai.template.package = $debian_dir.deb" >> /var/lib/lxc/$lxc/config
  fi
}


# -----------------------------------------------------------------------------
# Creates control file of debian package
# -----------------------------------------------------------------------------
function create_control_file {
  local lxc=$1
  local package_name=`get_package_name $lxc`
  local debian_dir=$2
  local architecture=`get_architecture`
  local control_file=$debian_dir/DEBIAN/control
  local dependency="subutai-cli (>= $SUBUTAI_VERSION)"
  
  # Check if lxc is master. If not, put a dependency to the parent template 
  lxc_assert $lxc "`usage`"
  local parent=`zfs_get_parent $container`
  local parent_package_name=`get_package_name $parent`

  if [ "$lxc" != "master" ]; then
    dependency="$dependency, $parent_package_name (= $SUBUTAI_VERSION)"
  fi
   
  # These properties are needed inside control file of debian package
  local Package="$package_name" 
  local Maintainer="subutai"
  local Architecture=$architecture
  local Version=$SUBUTAI_VERSION
  local Depends=$dependency
  local Description="This is a Subutai delta image debian package of $lxc template"

  #chmod control directory
  chmod 755 $debian_dir/DEBIAN

  # clean control file
  > $control_file
  # Change permission of the control file
  chmod 664 $control_file

  echo Package: $Package >> $control_file
  echo "Priority: optional" >> $control_file
  echo "Section: devel" >> $control_file
  echo Maintainer: $Maintainer >> $control_file
  echo Architecture: $Architecture >> $control_file
  echo Version: $Version >> $control_file
  echo Depends: $Depends >> $control_file
  echo Description: $Description >> $control_file
}


# -----------------------------------------------------------------------------
# Creates postinst script of debian package
# -----------------------------------------------------------------------------
function create_postinst_script {
  local debian_dir=$1
  local postinst_file=$debian_dir/DEBIAN/postinst
  echo "#!/bin/bash"  >> $postinst_file
  echo "set -e"  >> $postinst_file
  echo ""  >> $postinst_file
  chmod 555 $postinst_file
}


function get_debian_package_name {
  local lxc=$1
  if [ -z "$lxc" ]; then
    msg_error "lxc name not provided. Aborting ..."
    exit 1
  fi	
  local package_name=`get_package_name $lxc`
  local architecture=`get_architecture`
  echo $package_name"_"$SUBUTAI_VERSION"_"$architecture
}


function get_package_name {
  local lxc=$1
  if [ -z "$lxc" ]; then
    msg_error "lxc name not provided. Aborting ..."
    exit 1
  fi
  echo $lxc"-subutai-template"
}


function get_architecture {
  echo "amd64"
}
