#!/bin/bash

# ==========================================================================
# Set of functions that process locking functionality with a mix of utility
# functions.
# ==========================================================================

function lock_subutai_system {
  mkdir -p $SUBUTAI_LOCK_PATH
  touch $SUBUTAI_LOCK_PATH/system_lock
}

function unlock_subutai_system {
  if [ -f "$SUBUTAI_LOCK_PATH/system_lock" ]; then
    rm $SUBUTAI_LOCK_PATH/system_lock
  fi
}

function is_system_locked {
  ls $SUBUTAI_LOCK_PATH/system_lock > /dev/null 2>&1
  if [ $? == 0 ]
  then
    echo "true"
  else
    echo "false"
  fi
}

function is_system_all_locked {
  (ls $SUBUTAI_LOCK_PATH/system_lock || ls $SUBUTAI_LOCK_PATH/write/*) \
    > /dev/null 2>&1
  if [ $? == 0 ]
  then
    echo "true"
  else
    echo "false"
  fi
}

function lock_container_write {
  mkdir -p $SUBUTAI_LOCK_PATH/write/
  touch $SUBUTAI_LOCK_PATH/write/$1-$2
  echo $$ > $SUBUTAI_LOCK_PATH/write/$1-$2
}

function lock_container_read {
  mkdir -p $SUBUTAI_LOCK_PATH/read/
  touch $SUBUTAI_LOCK_PATH/read/$1-$2
  echo $$ > $SUBUTAI_LOCK_PATH/read/$1-$2
}

function unlock_container_write {
  if [ -d "$SUBUTAI_LOCK_PATH/write" ]; then
    removing=`ls $SUBUTAI_LOCK_PATH/write/ | grep -e "\b$1\b"`
    rm $SUBUTAI_LOCK_PATH/write/$removing  > /dev/null 2>&1
  fi
}

function unlock_container_read {
  if [ -d "$SUBUTAI_LOCK_PATH/write" ]; then
    removing=`ls $SUBUTAI_LOCK_PATH/write/ | grep -e "\b$1\b"`
    rm $SUBUTAI_LOCK_PATH/write/$removing > /dev/null 2>&1
  fi
  if [ -d "$SUBUTAI_LOCK_PATH/read" ]; then
    removing=`ls $SUBUTAI_LOCK_PATH/read/ | grep -e "\b$1\b"`
    rm $SUBUTAI_LOCK_PATH/read/$removing > /dev/null 2>&1
  fi
}

function are_containers_readable {
  if [[ -z "$2" ]]
  then
    wipe_outstanding_read_locks
    (ls $SUBUTAI_LOCK_PATH/read/ | grep -e "\b$1\b") > /dev/null 2>&1
    if [ $? == 0 ]
    then
      echo "true"
    else
      echo "false"
    fi
  else
    wipe_outstanding_read_locks
    (ls $SUBUTAI_LOCK_PATH/read/ | grep -e "\b$1\b" \
     || ls $SUBUTAI_LOCK_PATH/read/ | grep -e "\b$2\b") \
      > /dev/null 2>&1
    if [ $? == 0 ]
    then
      echo "true"
    else
      echo "false"
    fi
  fi
}

function are_containers_writable {
  if [[ -z "$2" ]]
  then
    wipe_outstanding_write_locks
    (ls $SUBUTAI_LOCK_PATH/write/ | grep -e "\b$1\b" \
     || ls $SUBUTAI_LOCK_PATH/read/ | grep -e "\b$1\b") > /dev/null 2>&1
    if [ $? == 0 ]
    then
      echo "true"
    else
      echo "false"
    fi
  else
    wipe_outstanding_write_locks
    (ls $SUBUTAI_LOCK_PATH/write/ | grep -e "\b$1\b" \
     || ls $SUBUTAI_LOCK_PATH/write/ | grep -e "\b$2\b" \
     || ls $SUBUTAI_LOCK_PATH/read/ | grep -e "\b$1\b" \
     || ls $SUBUTAI_LOCK_PATH/read/ | grep -e "\b$2\b") \
      > /dev/null 2>&1
    if [ $? == 0 ]
    then
      echo "true"
    else
      echo "false"
    fi
  fi
}

function wipe_outstanding_read_locks {
  for lockfile in $SUBUTAI_LOCK_PATH/read/*;
  do
    PROCESS_ID=`cat $lockfile`
    if [ $? -ne 0 ]
    then
        continue
    fi
    if [ "`ps -p $PROCESS_ID -o comm=`" == "" ]
    then
      rm $lockfile
    fi
  done
}

function wipe_outstanding_write_locks {
  for lockfile in $SUBUTAI_LOCK_PATH/write/*;
  do
    PROCESS_ID=`cat $lockfile`
    if [ $? -ne 0 ]
    then
        continue
    fi
    if [ "`ps -p $PROCESS_ID -o comm=`" == "" ]
    then
      rm $lockfile
    fi
  done
}
