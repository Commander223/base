#!/bin/bash

# --------------------------------------------------------------------------
# Bunch-O BTRFS convenience operations
# --------------------------------------------------------------------------


# rename datasets and set mount point for rootfs
function fs_rename_datasets_set_mount_points {
  local src="$1"
  local dst="$2"
  local dst_rootfs="$3"
}

function fs_clone {
  local parent_snap="$1"
  local child_ds="$2"
}
function fs_set_mountpoint {
  local child_roofs="$1"
  local child="$2"
}

function fs_addmount {
  local name=$1
  local mount=$2
  local zpool=$3
  local dataset=$zpool/$name-$mount

  return
}

#snaphost ll holds on clone's rootfs
function fs_snap_hold_readonly {
  local lxc_template="$1"
}

function fs_recv {
  local template="$1"
  local deltas="$2"
  local lxc_rootfs="$3"
}

#generate delta images of all filesystems
function fs_send {
  local parent="$1"
  local container="$2"
  local deltas="$3"
}

function fs_remove_mount {
  child="$1"
  parent="$2"
  partition="$3"
  pool="$4"

  child_ds="$pool/$child-$partition"
  parent_ds="$pool/$parent-$partition"

  msg_info "    - \"$child_ds\" dataset destroyed"
}


#release all holds on clone's rootfs snaps and delete snaps
function fs_rls_holds_delete_snaps {
  local clone="$1"
}

#demote template
function fs_demote_template {
  local temp="$1"  
  local lxc_path="/var/lib/lxc/$temp"


}

# returns the children of the provided container(arg $1)
function fs_get_children_list {
  local parent="$1"
  local snap=


  echo ${children_list[*]}
}


# prints out the children for a ds or container name (arg $1)
# counts and prints out the children
# returns the child count
function fs_get_children {
  local parent="$1"
  local snap=


  return $count
}


# assert snapshot (arg $1) does NOT exist, if it does show usage (arg $2)
# warning: exits!
function fs_assert_nosnap {
  local snap="$1"
  local usage="$2"

  if [ "$snap" == "`zfs list -t snapshot -o name -H $snap`" ]; then
    msg_error "Snapshot \"$snap\" already exists!"
    show_usage "$usage"
  fi
}


# assert snapshot (arg $1) exists, if it does NOT show usage (arg $2)
# warning: exits!
function fs_assert_snap {
  local snap="$1"
  local usage="$2"

  if [ -z "`zfs list -t snapshot -o name -H $snap`" ]; then
    msg_error "Snapshot \"$snap\" does NOT exist!"
    show_usage "$usage"
  fi
}


# assert dataset (arg $1) does NOT exist, if it does show usage (arg $2)
# warning: exits!
function fs_assert_nods {
  local ds="$1"
  local usage="$2"

  if [ -n "`zfs list -o name -H | grep $ds`" ]; then
    msg_error "ZFS dataset \"$ds\" already exists!"
    show_usage "$usage"
  fi
}


# assert dataset (arg $1) exists, if it does NOT show usage (arg $2)
# warning: exits!
function fs_assert_ds {
  local ds="$1"
  local usage="$2"

  if [ -z "`zfs list -o name -H $ds`" ]; then
    msg_error "ZFS dataset \"$ds\" does NOT exist!"
    show_usage "$usage"
  fi
}


# checks if the container (arg $1) is a template, echo "true"/"false"
function fs_is_template {
  local c="$1"
  if [ -z "`zfs list -t snapshot -o name -H | grep "lxc/$c@template"`" ]; then
    echo false
  else
    echo true
  fi
}


# gets the parent of a container
# first argument $1 is the name of the child container
# master returns master
function fs_get_parent {
  local c="$1"

  if [ "$c" == "master" ]; then
    echo master
    return
  fi

  local snap=`zfs get origin -o value -H lxc/$c`
  echo `fs_ctnr_from_ds $snap`
}


# extracts the container name from a dataset or a dataset snapshot
function fs_ctnr_from_ds {
  local ds="$1"
  echo $ds | sed -e 's/lxc.*\///' -e 's/@.*//' -e 's/-.*//'
}


# extracts the zpool name from a dataset or a dataset snapshot
function fs_pool_from_ds {
  local ds="$1"
  echo $ds | sed -e 's/\/.*//'
}


# extracts the snapshot name from a dataset snapshot
function fs_snap_from_ds {
  local ds="$1"
  echo $ds | sed -e 's/.*@//'
}


# extracts the partition name from a dataset or a dataset snapshot
function fs_part_from_ds {
  local ds="$1"
  echo $ds | sed -e 's/lxc.*\///' -e 's/@.*//' -e 's/.*-//'
}


# lists all the templates available
function fs_list_templates {
  for l in `zfs list -t snapshot -o name -H | grep @template | grep -v -`; do
    echo `fs_ctnr_from_ds $l`
  done
}

function fs_copy_ds {
  local from_ds="$1"

  if [ -n "`echo $from_ds | grep -`" ]; then
    local from_part="`fs_part_from_ds $from_ds`"
  else
    local from_part=""
  fi

  local from_pool="`fs_pool_from_ds $from_ds`"
  local from_lxc="`fs_ctnr_from_ds $from_ds`"
  local parent_lxc="`fs_get_parent $from_lxc`"
  local to_ds="$2"

  if [ -z "$from_part" ]; then 
    local parent_ds="$from_pool/$parent_lxc"
  else
    local parent_ds="$from_pool/$parent_lxc-$from_part"
  fi

  local parent_snap="$parent_ds@template"

  # make sure the from_ds exists and the to_ds does not
  fs_assert_ds "$from_ds"
  fs_assert_nods "$to_ds"
  fs_assert_ds "$parent_ds"
  fs_assert_snap "$parent_snap"

  local now=`date +"%m_%d_%Y"`
  local from_snap="$from_ds@$now"

  zfs snapshot "$from_snap"
  local stream="$SUBUTAI_TMPDIR/$parent_lxc$from_lxc$now"
  zfs send -I "$parent_snap" "$from_snap" > "$stream"
  zfs recv "$to_ds" < "$stream"

  # cleanup
  rm "$stream"
  zfs destroy "$from_snap"
  zfs destroy "$to_ds@$now"
}

