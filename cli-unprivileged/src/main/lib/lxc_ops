#!/bin/bash

# ==========================================================================
# Set of functions that replace lxc-xxx functionality with a mix of utility
# functions.
# ==========================================================================

function lxc_assert_name {
  local lxc="$1"
  if [ -n "`echo $lxc | grep '-'`" ]; then
    msg_error "Arg \"$lxc\" contains illegal dash character."
    unlock_container_read $1
    exit 1
  fi
}


# simply check if running before stopping
function lxc_stop {
  local lxc="$1"
  lxc_assert_name "$lxc"
  
  if [ "State:          RUNNING" == "`lxc-info -n $lxc | grep State`" ]; then
    lxc-stop -n $lxc
  fi
}


# waits until the networking comes up on a container (arg $1)
# if container is off starts it up and waits
# sleeps for maximum of (arg $2) seconds: defaults to 10 seconds
function lxc_wait_net {
  local lxc="$1"
  lxc_assert_name "$lxc"

  local waitmax="$2"

  lxc-start -d -n $lxc
  lxc-wait -n $lxc -s 'RUNNING' -t 5

  if [ -z "$waitmax" ]; then
    waitmax=10
  fi

  while [ $waitmax -gt 0 ]; do
    sleep 1
    ipv4=`lxc-ls -f | grep $lxc | awk '{print $3}'`

    if [ "$ipv4" != "-" ]; then
      msg_info "    - container \"$lxc\" online with ip = $ipv4"
      break
    fi
    
    waitmax=`expr $waitmax - 1`
  done
}


# --------------------------------------------------------------------------
# function: assertion to check if an LXC container exists, exit on failure
# --------------------------------------------------------------------------
#
# usage:
# ------
#    lxc_exists $lxc $usage


function lxc_assert_no {
  local lxc="$1"
  local usage="$2"

  if [ -z "$lxc" ]; then
    msg_error "No value provided for container's name. Aborting ..."
    unlock_container_read $lxc
    show_usage "$usage"
  fi
  lxc-info -n $lxc > /dev/null 2>&1
  if [ $? == 0 ]; then
    msg_error "Container \"$lxc\" exists. Aborting ..."
    unlock_container_read $lxc
    if [ $lxc == "master" ]; then
      unlock_subutai_system
    fi
    show_usage "$usage"
  else
    sudo ls /var/lib/lxc/$lxc/rootfs > /dev/null 2>&1
    if [ $? == 0 ]; then
      msg_error "Container \"$lxc\" exists. Aborting ..."
      if [ $lxc == "master" ]; then
        unlock_subutai_system
      fi
      unlock_container_read $lxc
      show_usage "$usage"
    else
      msg_info "    - check passed: container \"$lxc\" does NOT exist."
    fi
    msg_info "    - check passed: container \"$lxc\" does NOT exist."
  fi
}


function lxc_assert {
  local lxc="$1"
  local usage="$2"

  if [ -z "$lxc" ]; then
    msg_error "No value provided for container's name. Aborting ..."
    unlock_container_read $lxc
    show_usage "$usage"
  fi

  lxc-info -n $lxc > /dev/null 2>&1
  if [ $? != 0 ]; then
    sudo ls /var/lib/lxc/$lxc/rootfs > /dev/null 2>&1
    if [ $? != 0 ]; then
      msg_error "Container \"$lxc\" does NOT exist. Aborting ..."
      unlock_container_read $lxc
      show_usage "$usage"
    else
      
      msg_info "    - check passed: container \"$lxc\" exists."
    fi
  else
    sudo ls /var/lib/lxc/$lxc/rootfs > /dev/null 2>&1
    if [ $? == 0 ]; then
      msg_error "Container \"$lxc\" exist in both in public and $whoami 's templates. Rename local template!  Aborting ..."
      unlock_container_read $lxc
      show_usage "$usage"
    else
      msg_info "    - check passed: container \"$lxc\" exists."
    fi
  fi
}


# --------------------------------------------------------------------------
# function: clones a parent dataset for a new child partition
# --------------------------------------------------------------------------
#
# usage:
# ------
#    lxc-clone-ds $parent $child $partition $zpool $usage

function lxc_clone_ds {
  local parent="$1"
  lxc_assert_name "$parent"

  local child="$2"
  lxc_assert_name "$child"

  local partition="$3"
  local pool="$4"
  local usage="$5"

  local child_ds="$pool/$child-$partition"
  local parent_snap="$pool/$parent-$partition@template"

  fs_assert_snap "$parent_snap" "$usage"
  fs_clone "$parent_snap" "$child_ds"
  msg_info "    - \"$child_ds\" cloned from \"$parent_snap\""
}


function lxc_new_mac {
  local mac=`sudo cat /etc/lxc/default.conf | grep lxc.network.hwaddr | awk '{print $3}'`
  
  local int=`expr $RANDOM % 255`
  local hex=`printf '%x\n' "$int"`
  local mac=`echo $mac | sudo sed -e "s/xx/$hex/"`

  int=`expr $RANDOM % 255`
  hex=`printf '%x\n' "$int"`
  mac=`echo $mac | sudo sed -e "s/xx/$hex/"`

  int=`expr $RANDOM % 255`
  hex=`printf '%x\n' "$int"`
  mac=`echo $mac | sudo sed -e "s/xx/$hex/"`

  echo $mac
}


# --------------------------------------------------------------------------
# function lxc_clone: instead of lxc-clone we use our very own clone op
# --------------------------------------------------------------------------
#
# usage:
# ------
#    lxc_clone $parent $child $usage
#
# execution plan:
# ---------------
# (1) perform sanity checks
#       - check that child does NOT exist
#       - check that parent does exist
#       - check that parent is a template
# (2) setup skeleton of new cloned child container
#       - create home and rootfs
#       - stream and filter config with var substitution
# (3) fs clone snapshots for child datasets
# (4) alter hostname from /etc/hosts and /etc/hostname

function lxc_find_parent_dir {
  local parent="$1"
  lxc-info -n $parent > /dev/null 2>&1 
  if [ $? == 0 ]; then
    echo "$HOME/.local/share/lxc/$parent"
  else
    echo "/var/lib/lxc/$parent"
  fi
}

function lxc_clone {
  local parent="$1"
  lxc_assert_name "$parent"

  local child="$2"
  lxc_assert_name "$child"
  
  local environmentId="$3"
  
  local usage="$4"

  if [ -z "$parent" ]; then
    msg_error "Parameters not provided. Aborting ..."
    unlock_container_read $child
    exit 1
  fi

  if [ -z "$child" ]; then
    msg_error "Child parameter not provided. Aborting ..."
    unlock_container_read $parent
    exit 1
  fi

  if [ -z "$environmentId" ]; then
    msg_error "environmentId parameter not provided. Aborting ..."
    unlock_container_read $parent
    unlock_container_read $child
    exit 1
  fi

  local parent_home=`lxc_find_parent_dir $parent`
  local parent_conf=$parent_home/config
  local child_home=/$HOME/.local/share/lxc/$child
  local child_rootfs=$child_home/rootfs
  local child_conf=$child_home/config

  # (1) perform sanity checks
  lxc_assert_no $child "`usage`"
  lxc_assert $parent "`usage`"

  if [ "`fs_is_template $parent`" == "false" ]; then
    msg_error "Parent \"$parent\" is not a template"
    unlock_container_read $child
    exit 1
  else
    msg_info "    - parent \"$parent\" is a template"
  fi

  if [[ $parent_home =~ "/var/lib/lxc/" ]]; then
    ls $HOME/.local/tmpdir/$parent/rootfs > /dev/null 2>&1
    if [ $? != 0 ]; then
       fs_send_recv_clone $parent
    fi
  fi
  # (2) setup skeleton of new cloned child container
  fs_volume_create $child_home
  
  local mac=`lxc_new_mac`
  #TODO sed failed
  sudo cat $parent_conf | grep -v subutai.template.package 		   \
      | sudo sed                                           		   \
     -e "s/lxc\.utsname.*/lxc\.utsname = $child/"                  \
     -e "s/subutai\.parent.*/subutai\.parent = $parent/"           \
     -e "/lxc\.mount\.entry/d" \
     -e "/subutai\.git\.branch/ a\lxc\.mount\.entry = $HOME\/\.local\/lxc\/$child-opt opt none bind,rw 0 0" \
     -e "/subutai\.git\.branch/ a\lxc\.mount\.entry = $HOME\/\.local\/lxc\-data\/$child-var var none bind,rw 0 0" \
     -e "/subutai\.git\.branch/ a\lxc\.mount\.entry = $HOME\/\.local\/lxc\-data\/$child-home home none bind,rw 0 0" \
     -e "s|\/var\/lib\/lxc\/$parent\/|${HOME}\/\.local\/share\/lxc\/$child\/|g"\
     -e "s|\/share\/lxc\/$parent\/|\/share\/lxc\/$child\/|g" \
     -e "s/subutai\.git\.branch.*/subutai\.git\.branch = $child/"  \
     -e "s/lxc\.network\.hwaddr.*/lxc\.network\.hwaddr = $mac/"    \
     -e "s/$parent-/$child-/g" | grep -v subutai.git.uuid >> $child_conf
  cat $HOME/.config/lxc/default.conf >> $child_conf
  sudo cp $parent_home/fstab $child_home

  # (3) fs clone snapshots for child datasets
  fs_clone lxc/$parent@template lxc/$child
  fs_set_mountpoint $child_rootfs $child
  lxc_clone_ds $parent $child opt lxc "$usage"
  lxc_clone_ds $parent $child var lxc-data "$usage"
  lxc_clone_ds $parent $child home lxc-data "$usage"
  lxc_chown $child

  # (4) alter hostname from /etc/hosts and /etc/hostname
  
  echo $child > $child_rootfs/etc/hostname
  sudo cat $parent_home/rootfs/etc/hosts | sudo sed \
    -e "s/$parent/$child/g" > $child_rootfs/etc/hosts

  if [ -n "`sudo cat $child_rootfs/etc/profile | grep PHY_HOST`" ]; then
    sudo cat $child_rootfs/etc/profile | \
      grep -v PHY_HOST >> $child_rootfs/etc/profile.new
    rm $child_rootfs/etc/profile
    mv $child_rootfs/etc/profile.new $child_rootfs/etc/profile
  fi

  # creating subutai folder and lxc-config file with environmentId parameter
  if [ ! -d "$child_rootfs/etc/subutai" ]; then
     mkdir $child_rootfs/etc/subutai
  fi

  if [ ! -f $child_rootfs/etc/subutai/lxc-config ]; then
     touch $child_rootfs/etc/subutai/lxc-config
  else
     cp /dev/null $child_rootfs/etc/subutai/lxc-config
  fi
  
  echo "[Subutai-Agent]" >> $child_rootfs/etc/subutai/lxc-config
  echo "subutai_env_id = $environmentId"  >> $child_rootfs/etc/subutai/lxc-config

  # adding physical hostname to cloned instance or template   
  echo "subutai_parent_hostname = `hostname`" >> $child_rootfs/etc/subutai/lxc-config

  # removing the agent uuid of the cloned instance template
  if [ -s "$child_rootfs/etc/subutai-agent/uuid.txt" ]; then
    echo "" > $child_rootfs/etc/subutai-agent/uuid.txt
  fi
   lxc_mapshifting $child
   sudo sed -i "/lxc.network/d" $child_conf
}

function lxc_chown {
  local lxc_name="$1"
  #change the ownership of the container and shift the rootfs to user id and group
  sudo chown -R $USER:$USER $HOME/.local/share/lxc/$lxc_name
  sudo chown -R $USER:$USER $HOME/.local/lxc/$lxc_name-opt
  sudo chown -R $USER:$USER $HOME/.local/lxc-data/$lxc_name-var
  sudo chown -R $USER:$USER $HOME/.local/lxc-data/$lxc_name-home

}

function lxc_mapshifting {
  local lxc_name="$1"
  #change the ownership of the container and shift the rootfs to user id and group
  sudo chown -R $USER:$USER $HOME/.local/share/lxc/$lxc_name
  sudo uidmapshift -u $HOME/.local/share/lxc/$lxc_name 0 $(grep $USER /etc/subuid | cut -d : -f 2) $(grep $USER /etc/subuid | cut -d : -f 3) > /dev/null 2>&1
  sudo uidmapshift -g $HOME/.local/share/lxc/$lxc_name 0 $(grep $USER /etc/subuid | cut -d : -f 2) $(grep $USER /etc/subuid | cut -d : -f 3) > /dev/null 2>&1

  sudo chown -R $USER:$USER $HOME/.local/lxc/$lxc_name-opt
  sudo uidmapshift -u $HOME/.local/lxc/$lxc_name-opt 0 $(grep $USER /etc/subuid | cut -d : -f 2) $(grep $USER /etc/subuid | cut -d : -f 3) > /dev/null 2>&1
  sudo uidmapshift -g $HOME/.local/lxc/$lxc_name-opt 0 $(grep $USER /etc/subuid | cut -d : -f 2) $(grep $USER /etc/subuid | cut -d : -f 3) > /dev/null 2>&1

  sudo chown -R $USER:$USER $HOME/.local/lxc-data/$lxc_name-var
  sudo uidmapshift -u $HOME/.local/lxc-data/$lxc_name-var 0 $(grep $USER /etc/subuid | cut -d : -f 2) $(grep $USER /etc/subuid | cut -d : -f 3) > /dev/null 2>&1
  sudo uidmapshift -g $HOME/.local/lxc-data/$lxc_name-var 0 $(grep $USER /etc/subuid | cut -d : -f 2) $(grep $USER /etc/subuid | cut -d : -f 3) > /dev/null 2>&1

  sudo chown -R $USER:$USER $HOME/.local/lxc-data/$lxc_name-home
  sudo uidmapshift -u $HOME/.local/lxc-data/$lxc_name-home 0 $(grep $USER /etc/subuid | cut -d : -f 2) $(grep $USER /etc/subuid | cut -d : -f 3) > /dev/null 2>&1
  sudo uidmapshift -g $HOME/.local/lxc-data/$lxc_name-home 0 $(grep $USER /etc/subuid | cut -d : -f 2) $(grep $USER /etc/subuid | cut -d : -f 3) > /dev/null 2>&1


}

function lxc_copy {
  # nice local names for args
  local parent="$1"
  lxc_assert_name "$parent"

  local child="$2"
  lxc_assert_name "$child"

  local usage="$3"

  if [ -z "$parent" ]; then
    msg_error "Parameters not provided. Aborting ..."
    unlock_container_read $child
    exit 1
  fi

  if [ -z "$child" ]; then
    msg_error "Child parameter not provided. Aborting ..."
    unlock_container_read $parent
    exit 1
  fi

  # keep it tight with convenience vars
  local parent_home=`lxc_find_parent_dir $parent`
  local parent_conf=$parent_home/config
  local child_home=$HOME/.local/share/lxc/$child
  local child_rootfs=$child_home/rootfs
  local child_conf=$child_home/config

  # (1) perform sanity checks
  lxc_assert_no $child "`usage`"
  lxc_assert $parent "`usage`"

  if [ "`fs_is_template $parent`" == "true" ]; then
    msg_error "Parent \"$parent\" must not be a template for a copy op"
    unlock_container_read $child
    exit 1
  else
    msg_info "    - parent \"$parent\" is not a template"
  fi

  # (2) setup skeleton of new cloned child container
  mkdir -p $child_rootfs
  local mac=`lxc_new_mac`
  sudo cat $parent_conf | sudo sed                                           \
     -e "s/lxc\.utsname.*/lxc\.utsname = $child/"                  \
     -e "s/subutai\.parent.*/subutai\.parent = $parent/"           \
     -e "s|\/var\/lib\/lxc\/$parent\/|${HOME}\/\.local\/share\/lxc\/$child\/|g"\
     -e "s/subutai\.git\.branch.*/subutai\.git\.branch = $child/"  \
     -e "s/lxc\.network\.hwaddr.*/lxc\.network\.hwaddr = $mac/"    \
     -e "s/$parent-/$child-/g" | grep -v subutai.git.uuid >> $child_conf
  sudo cp $parent_home/fstab $child_home



  # (3) fs clone child datasets
  grand_parent="`fs_get_parent $parent`"
  fs_copy_ds "lxc/$parent" "lxc/$child"
  fs_set_mountpoint $child_rootfs $child
  fs_copy_ds "lxc/$parent-opt" "lxc/$child-opt"
  fs_copy_ds "lxc-data/$parent-var" "lxc-data/$child-var"
  fs_copy_ds "lxc-data/$parent-home" "lxc-data/$child-home"

  # (4) alter hostname from /etc/hosts and /etc/hostname
  echo $child > $child_rootfs/etc/hostname
  sudo cat $parent_home/rootfs/etc/hosts | sudo sed \
    -e "s/$parent/$child/g" > $child_rootfs/etc/hosts
}


function lxc_rename {
  local src="$1"
  lxc_assert_name "$src"

  local dst="$2"
  lxc_assert_name "$dst"

  local usage="$3"

  if [ -z "$src" ]; then
    msg_error "Parameters not provided for source container. Aborting ..."
    unlock_container_read $dst
    exit 1
  fi

  if [ -z "$dst" ]; then
    msg_error "Parameters not provided for destination container. Aborting ..."
    unlock_container_read $src
    exit 1
  fi

  # keep it tight with convenience vars
  local src_home=`lxc_find_parent_dir $src`
  local src_conf=$src_home/config
  local dst_home=$HOME/.local/share/lxc/$dst
  local dst_rootfs=$dst_home/rootfs
  local dst_conf=$dst_home/config

  # (1) perform sanity checks
  lxc_assert_no $dst "`usage`"
  lxc_assert $src "`usage`"

  if [ "`fs_is_template $src`" == "true" ]; then
    msg_error "Source \"$src\" must not be a template for a rename op"
    unlock_container_read $dst
    exit 1
  fi

  # (2) setup skeleton of destination container
  fs_volume_create $dst_home
  sudo cat $src_conf | sudo sed                                    \
     -e "s/lxc\.utsname.*/lxc\.utsname = $dst/"                  \
     -e "/lxc\.mount\.entry/d" \
     -e "/subutai\.git\.branch/ a\lxc\.mount\.entry = $HOME\/\.local\/lxc\/$dst-opt opt none bind,rw 0 0" \
     -e "/subutai\.git\.branch/ a\lxc\.mount\.entry = $HOME\/\.local\/lxc\-data\/$dst-var var none bind,rw 0 0" \
     -e "/subutai\.git\.branch/ a\lxc\.mount\.entry = $HOME\/\.local\/lxc\-data\/$dst-home home none bind,rw 0 0" \
     -e "s|\/lxc\/$src\/|\/lxc\/$dst\/|g"\
     -e "s/subutai\.git\.branch.*/subutai\.git\.branch = $dst/"  \
     -e "s/$parent-/$child-/g" | grep -v subutai.git.uuid >> $dst_conf
  cp $src_home/fstab $dst_home
  
  lxc_stop "$src"
  
  # umount all the partitions
  umount "$HOME/.local/lxc-data/$src-home" > /dev/null 2>&1
  umount "$HOME/.local/lxc-data/$src-var" > /dev/null 2>&1
  umount "$HOME/.local/lxc/$src-opt" > /dev/null 2>&1
  umount "$HOME/.local/share/lxc/$src/rootfs" > /dev/null 2>&1
  
  # rename datasets and set mount point for rootfs
  lxc_chown $src
  fs_rename_datasets_set_mount_point $src $dst $dst_rootfs
  lxc_chown $dst
  # change the hostname
  echo "$dst" > "$dst_rootfs/etc/hostname"
  str_replace_in_file "$src" "$dst" "$dst_rootfs/etc/hosts"
  lxc_chown $dst
  lxc_mapshifting $dst
  # cleanup the old source, start up the new container, and adjust git
  fs_volume_delete $src
  lxc_wait_net "$dst"
  git_rename_branch "$src" "$dst"
  lxc_stop "$dst"
}

function lxc_remove_agent {
  container=$1
  agent_package="subutai-agent"
  
  lxc_assert $container
  lxc-wait -n $container -s RUNNING
  lxc-attach -n $container -- apt-get purge -y -f $agent_package > /dev/null 2>&1
  lxc-attach -n $container -- dpkg -s $agent_package > /dev/null 2>&1
  status=$?
  message="    - agent removed from \"$container\""
  if [ "$status" == "1" ]
  then
      msg_info "$message"
  else
      msg_fail "$message"
  fi
}


function lxc_install_agent {
  container=$1
  if [ "$SUBUTAI_OFFLINE_MODE" == "true" ] || [ "$OVS_DISABLED" == "true" ] ; then
    return
  fi

  lxc_wait_net $container

  agent_package="subutai-agent"
  #Agent checks
  agentresult=$(lxc-attach -n $container -- dpkg --get-selections | grep $agent_package)
  if [ -z "$agentresult" ] ;then
    #installing agent
    lxc-attach -n $container -- apt-get update > /dev/null 2>&1

    lxc-attach -n $container -- apt-get install --assume-yes --force-yes $agent_package > /dev/null 2>&1
    lxc-attach -n $container -- dpkg -s $agent_package > /dev/null 2>&1
    status=$?
    message="    - subutai agent installed on $container"
    if [ $status == "0" ]; then
      msg_info "$message"
    else
      msg_error "$message"
    fi
  else
    msg_warn "    - subutai agent already installed on $container"
  fi
}
