package org.safehaus.subutai.wol.ui;


import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.Page;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.Runo;
import org.safehaus.subutai.common.protocol.Disposable;
import org.safehaus.subutai.wol.api.WolManagerException;
import org.safehaus.subutai.common.command.CommandResult;

import java.io.OutputStream;


/**
 * Created by emin on 14/11/14.
 */
public class WolForm extends CustomComponent implements Disposable {

    @AutoGenerated
    private Button sendMagicPackageButton;
    @AutoGenerated
    private TextField macIDTextField;
    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private Label macIDlabel;
    @AutoGenerated
    private Label singleOperationlabel;

    private WolUI wolui;

    public WolForm(WolUI wolui)
    {
        // common part: create layout
        mainLayout = new AbsoluteLayout();
        mainLayout.setImmediate( false );
        mainLayout.setWidth( "100%" );
        mainLayout.setHeight( "100%" );
        this.wolui = wolui;

        // top-level component properties
        setWidth( "100.0%" );
        setHeight( "100.0%" );

        // wolMasterLayout
        final AbsoluteLayout wolMasterLayout = buildAbsoluteLayout_2();
        mainLayout.addComponent( wolMasterLayout, "top:20.0px;right:0.0px;bottom:-20.0px;left:0.0px;" );

        setHeight( 100, Unit.PERCENTAGE );
        VerticalLayout verticalLayout = new VerticalLayout();
        verticalLayout.setSpacing( true );
        verticalLayout.setSizeFull();

        TabSheet sheet = new TabSheet();
        sheet.setStyleName( Runo.TABSHEET_SMALL );
        sheet.setSizeFull();
        sheet.addTab( mainLayout, "Wake on Lan Operations" );
        verticalLayout.addComponent( sheet );

        setCompositionRoot( verticalLayout );
    }

    @AutoGenerated
    private AbsoluteLayout buildAbsoluteLayout_2()
    {

        // common part: create layout
        AbsoluteLayout absoluteLayout = new AbsoluteLayout();
        absoluteLayout.setImmediate( false );
        absoluteLayout.setWidth( "100.0%" );
        absoluteLayout.setHeight( "100.0%" );


        // singleOperationlabel
        singleOperationlabel = new Label();
        singleOperationlabel.setImmediate( false );
        singleOperationlabel.setWidth( "-1px" );
        singleOperationlabel.setHeight( "-1px" );
        singleOperationlabel.setValue( "Single Wake On Lan Operation" );
        absoluteLayout.addComponent( singleOperationlabel, "top:20.0px;left:65.0px;" );

        // MacID label
        macIDlabel = new Label();
        macIDlabel.setImmediate( false );
        macIDlabel.setWidth( "-1px" );
        macIDlabel.setHeight( "-1px" );
        macIDlabel.setValue( "Mac Address" );
        absoluteLayout.addComponent( macIDlabel, "top:60.0px;left:25.0px;" );

        // MacID texfield
        macIDTextField = new TextField();
        macIDTextField.setImmediate(false);
        macIDTextField.setWidth("-1px");
        macIDTextField.setHeight("-1px");
        macIDTextField.setMaxLength(17);
        absoluteLayout.addComponent( macIDTextField, "top:60.0px;left:130.0px;" );

        // sendMagicPackageButton
        sendMagicPackageButton = createSendMagicPackageButton();
        absoluteLayout.addComponent( sendMagicPackageButton, "top:100.0px;left:40.0px;" );

        return absoluteLayout;
    }


    private void showNotification(String message)
    {
        Notification notification = new Notification(message, Notification.Type.WARNING_MESSAGE);
        notification.setDelayMsec(1500);
        notification.show(Page.getCurrent());
    }


    private boolean checkMacID(String macID)
    {
        if( macID.length() == 17 )
        {
            if( (macID.charAt(2) == ':') &&  (macID.charAt(5) == ':') && (macID.charAt(8) == ':')&&
                    (macID.charAt(11) == ':') && (macID.charAt(14) == ':'))
            {
                return true;
            }
            else
                return false;
        }
        else
        {
            return false;
        }
    }


    private Button createSendMagicPackageButton()
    {
        sendMagicPackageButton = new Button();
        sendMagicPackageButton.setCaption( "Send Magic Package" );
        sendMagicPackageButton.setImmediate(false);
        sendMagicPackageButton.setWidth("-1px");
        sendMagicPackageButton.setHeight("-1px");

        sendMagicPackageButton.addClickListener( new Button.ClickListener()
        {
            @Override
            public void buttonClick( final Button.ClickEvent clickEvent )
            {
                try
                {
                    String macID = macIDTextField.getValue().toString();
                    if( macID.isEmpty() )
                    {
                        showNotification("Mac Address Cannot be Empty");
                    }
                    else
                    {
                        if ( checkMacID(macID) )
                        {
                            CommandResult commandresult = wolui.getWolManager().sendMagicPackagebyMacId(macID);
                            if( commandresult.hasSucceeded() )
                            {
                                showNotification("Magic Package Sent to " + macID);
                            }
                            else
                            {
                                showNotification("Magic Package Cannot be Sent to " + macID);
                            }
                        }
                        else
                        {
                            showNotification("Invalid Mac Address Content");
                        }
                    }
                }
                catch( WolManagerException e )
                {
                    showNotification(e.getMessage());
                }
            }
        } );
        return sendMagicPackageButton;
    }

    @Override
    public void dispose()
    {
        final WolUI wolUI = null;
    }
}
