package org.safehaus.subutai.core.environment.ui.forms;


import java.util.List;

import org.safehaus.subutai.core.environment.ui.manage.EnvironmentBuildWizard;
import org.safehaus.subutai.core.peer.api.Peer;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;


public class SelectPeersPanel extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,
    "movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private Button getPeersButton;
    @AutoGenerated
    private Button cancelButton;
    @AutoGenerated
    private Button nextButton;
    @AutoGenerated
    private Table peersTable;
    private EnvironmentBuildWizard environmentBuildWizard;


    /**
     * The constructor should first build the main layout, set the composition root and then do any custom
     * initialization.
     *
     * The constructor will not be automatically regenerated by the visual editor.
     */
    public SelectPeersPanel( EnvironmentBuildWizard environmentBuildWizard ) {
        buildMainLayout();
        setCompositionRoot( mainLayout );
        this.environmentBuildWizard = environmentBuildWizard;

        // TODO add user code here
    }


    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new AbsoluteLayout();
        mainLayout.setImmediate( false );
        mainLayout.setWidth( "100%" );
        mainLayout.setHeight( "100%" );

        // top-level component properties
        setWidth( "100.0%" );
        setHeight( "100.0%" );

        // peersTable
        peersTable = createTableTemplate( "Peers" );
        mainLayout.addComponent( peersTable, "top:80.0px;left:20.0px;" );

        // nextButton
        nextButton = createNextButton();
        mainLayout.addComponent( nextButton, "top:300.0px;left:20.0px;" );

        // cancelButton
        cancelButton = createCancelButton();
        mainLayout.addComponent( cancelButton, "top:300.0px;left:140.0px;" );

        // getPeersButton
        getPeersButton = createShowPeersButton();
        mainLayout.addComponent( getPeersButton, "top:20.0px;left:20.0px;" );

        return mainLayout;
    }


    private Button createNextButton() {
        Button nextButton = new Button();
        nextButton.setCaption( "Next" );
        nextButton.setImmediate( true );
        nextButton.setWidth( "-1px" );
        nextButton.setHeight( "-1px" );
        nextButton.addClickListener( new Button.ClickListener() {
            @Override
            public void buttonClick( final Button.ClickEvent clickEvent ) {
            }
        } );
        return nextButton;
    }


    private Table createTableTemplate( String caption ) {
        final Table table = new Table( caption );
        table.addContainerProperty( "Host", String.class, null );
        table.addContainerProperty( "Select", CheckBox.class, null );
        table.setWidth( "500px" );
        table.setHeight( "200px" );
        table.setPageLength( 10 );
        table.setImmediate( true );
            /*table.addItemClickListener( new ItemClickEvent.ItemClickListener() {
                @Override
                public void itemClick( ItemClickEvent event ) {
                    if ( event.isDoubleClick() ) {
                        String lxcHostname =
                                ( String ) table.getItem( event.getItemId() ).getItemProperty( "Host" ).getValue();
                        Agent lxcAgent = CassandraUI.getAgentManager().getAgentByHostname( lxcHostname );
                        if ( lxcAgent != null ) {
                            TerminalWindow terminal =
                                    new TerminalWindow( Sets.newHashSet( lxcAgent ), CassandraUI.getExecutor(),
                                            CassandraUI.getCommandRunner(), CassandraUI.getAgentManager() );
                            contentRoot.getUI().addWindow( terminal.getWindow() );
                        }
                        else {
                            show( "Agent is not connected" );
                        }
                    }
                }
            } );*/
        return table;
    }


    private Button createShowPeersButton() {
        Button getPeersButton = new Button();
        getPeersButton.setCaption( "Show peers" );
        getPeersButton.setImmediate( false );
        getPeersButton.setWidth( "-1px" );
        getPeersButton.setHeight( "-1px" );

        getPeersButton.addClickListener( new Button.ClickListener() {
            @Override
            public void buttonClick( final Button.ClickEvent clickEvent ) {
                List<Peer> peers = environmentBuildWizard.getManagerUI().getPeerManager().peers();
                populateTable( peersTable, peers );
            }
        } );

        return getPeersButton;
    }


    private void populateTable( final Table table, List<Peer> peers ) {
        table.removeAllItems();
        for ( final Peer peer : peers ) {
            CheckBox checkBox = new CheckBox();

            final Object rowId = table.addItem( new Object[] {
                    peer.getName(), checkBox
            }, null );
        }
    }


    private Button createCancelButton() {
        Button cancelButton = new Button();
        cancelButton.setCaption( "Cancel" );
        cancelButton.setImmediate( true );
        cancelButton.setWidth( "-1px" );
        cancelButton.setHeight( "-1px" );

        cancelButton.addClickListener( new Button.ClickListener() {
            @Override
            public void buttonClick( final Button.ClickEvent clickEvent ) {
                environmentBuildWizard.close();
            }
        } );


        return cancelButton;
    }
}