package io.subutai.core.peer.ui.forms;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Strings;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import io.subutai.common.peer.PeerException;
import io.subutai.common.peer.RegistrationData;
import io.subutai.common.peer.RegistrationStatus;
import io.subutai.core.peer.ui.PeerManagerPortalModule;


/**
 * Registration process should be handled in save manner so no middleware attacks occur. In order to get there peers
 * need to exchange with public keys. This will create ssl layer by encrypting all traffic passing through their
 * connection. So first initial handshake will be one direction, to pass keys through encrypted channel and register
 * them in peers' trust stores. These newly saved keys will be used further for safe communication, with bidirectional
 * authentication.
 */

public class RegistrationForm extends CustomComponent
{

    private static final Logger LOG = LoggerFactory.getLogger( RegistrationForm.class );
    private Button showPeersButton;
    private Button doRequestButton;
    private TextField hostField;
    private TextField keyPhraseField;

    private Table requestsTable;

    private PeerManagerPortalModule module;


    /**
     * The constructor should first build the main layout, set the composition root and then do any custom
     * initialization. <p/> The constructor will not be automatically regenerated by the visual editor.
     */
    public RegistrationForm( final PeerManagerPortalModule module )
    {
        VerticalLayout layout = buildLayout();
        setCompositionRoot( layout );

        this.module = module;
        updateRequestsTable();
    }


    private VerticalLayout buildLayout()
    {
        VerticalLayout content = new VerticalLayout();
        content.setSpacing( true );
        content.setMargin( true );
        content.setStyleName( "default" );
        content.setSizeFull();

        // peerRegistration
        final Label peerRegistration = new Label();
        peerRegistration.setImmediate( false );
        peerRegistration.setValue( "Peer registration" );
        content.addComponent( peerRegistration );

        FormLayout fl = new FormLayout();

        fl.addComponent( new Label( "Host" ) );
        // hostField
        hostField = new TextField();
        hostField.setImmediate( false );
        hostField.setMaxLength( 45 );
        fl.addComponent( hostField );

        fl.addComponent( new Label( "Secret keyphrase" ) );
        // secretKeyphrase
        keyPhraseField = new TextField();
        keyPhraseField.setImmediate( false );
        keyPhraseField.setMaxLength( 45 );
        fl.addComponent( keyPhraseField );
        content.addComponent( fl );

        // doRequestButton
        doRequestButton = createRegisterButton();
        content.addComponent( doRequestButton );
        content.addComponent( createRefreshButton() );

        // requestsTable
        requestsTable = new Table();

        requestsTable.setCaption( "List of remote peers" );

        requestsTable.setImmediate( true );
        requestsTable.setSizeFull();
        requestsTable.addContainerProperty( "ID", String.class, "UNKNOWN" );
        requestsTable.addContainerProperty( "Name", String.class, null );
        requestsTable.addContainerProperty( "Host", String.class, null );
        requestsTable.addContainerProperty( "Status", RegistrationStatus.class, null );
        requestsTable.addContainerProperty( "Action", RequestActionsComponent.class, null );

        content.addComponent( requestsTable );

        return content;
    }


    private Button createRefreshButton()
    {
        showPeersButton = new Button();
        showPeersButton.setCaption( "Refresh" );
        showPeersButton.setImmediate( false );

        showPeersButton.addClickListener( new Button.ClickListener()
        {
            @Override
            public void buttonClick( final Button.ClickEvent clickEvent )
            {
                updateRequestsTable();
            }
        } );

        return showPeersButton;
    }


    private void updateRequestsTable()
    {

        requestsTable.removeAllItems();
        for ( RegistrationData registrationData : module.getPeerManager().getRegistrationRequests() )
        {
            LOG.debug( registrationData.getPeerInfo().getIp() );
            RequestActionsComponent.RequestActionListener listener = new RequestActionsComponent.RequestActionListener()

            {
                @Override
                public void OnPositiveButtonTrigger( final RegistrationData request,
                                                     RequestActionsComponent.RequestUpdateViewListener
                                                             updateViewListener )
                {
                    positiveActionTrigger( request, updateViewListener );
                }


                @Override
                public void OnNegativeButtonTrigger( final RegistrationData request,
                                                     RequestActionsComponent.RequestUpdateViewListener
                                                             updateViewListener )
                {
                    negativeActionTrigger( request, updateViewListener );
                }
            };
            RequestActionsComponent actionsComponent =
                    new RequestActionsComponent( module, registrationData, listener );

            String rowId = registrationData.getPeerInfo().getId();
            requestsTable.addItem( new Object[] {
                    registrationData.getPeerInfo().getId(), registrationData.getPeerInfo().getName(),
                    registrationData.getPeerInfo().getIp(), registrationData.getStatus(), actionsComponent
            }, rowId );
            LOG.debug( String.format( "Size: %d. %s", requestsTable.size(), rowId ) );
        }
    }


    private void positiveActionTrigger( final RegistrationData request,
                                        final RequestActionsComponent.RequestUpdateViewListener updateViewListener )
    {
        switch ( request.getStatus() )
        {
            case REQUESTED:
                approvePeerRegistration( request, updateViewListener );
                break;
            case APPROVED:
                unregister( request, updateViewListener );
                break;
            default:
                throw new IllegalStateException( request.getStatus().name(), new Throwable( "Invalid case." ) );
        }
    }


    private void negativeActionTrigger( final RegistrationData request,
                                        final RequestActionsComponent.RequestUpdateViewListener updateViewListener )
    {
        switch ( request.getStatus() )
        {
            case REQUESTED:
                rejectRegistration( request, updateViewListener );
                break;
            case WAIT:
                cancelRegistration( request, updateViewListener );
                break;
            default:
                throw new TypeNotPresentException( request.getStatus().name(), new Throwable( "Invalid case." ) );
        }
    }


    private void sendRegistrationRequest( final String destinationHost, final String keyPhrase )
    {
        try
        {
            module.getPeerManager().doRegistrationRequest( destinationHost, keyPhrase );
        }
        catch ( PeerException e )
        {
            Notification.show( e.getMessage(), Notification.Type.WARNING_MESSAGE );
        }
    }


    private void unregister( final RegistrationData request,
                             final RequestActionsComponent.RequestUpdateViewListener updateViewListener )
    {
        try
        {
            module.getPeerManager().doUnregisterRequest( request );
            updateRequestsTable();
        }
        catch ( PeerException e )
        {
            Notification.show( e.getMessage(), Notification.Type.WARNING_MESSAGE );
        }
    }


    private void approvePeerRegistration( final RegistrationData request,
                                          final RequestActionsComponent.RequestUpdateViewListener updateViewListener )
    {
        new Thread( new Runnable()
        {
            @Override
            public void run()
            {
                approveRegistrationRequest( request, updateViewListener );
                updateRequestsTable();
            }
        } ).start();
    }


    private void approveRegistrationRequest( final RegistrationData request,
                                             final RequestActionsComponent.RequestUpdateViewListener
                                                     updateViewListener )
    {
        try
        {
            module.getPeerManager().doApproveRequest( keyPhraseField.getValue(), request );
        }
        catch ( Exception e )
        {
            Notification.show( e.getMessage(), Notification.Type.WARNING_MESSAGE );
        }
    }


    /**
     * Peer request rejection intented to be handled before they exchange with keys
     *
     * @param request - registration request
     * @param updateViewListener - used to update peers table with relevant buttons captions
     */
    private void rejectRegistration( final RegistrationData request,
                                     final RequestActionsComponent.RequestUpdateViewListener updateViewListener )
    {
        new Thread( new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    module.getPeerManager().doRejectRequest( request );
                }
                catch ( PeerException e )
                {
                    Notification.show( e.getMessage(), Notification.Type.WARNING_MESSAGE );
                }
                updateRequestsTable();
            }
        } ).start();
    }


    private void cancelRegistration( final RegistrationData request,
                                     final RequestActionsComponent.RequestUpdateViewListener updateViewListener )
    {
        new Thread( new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    module.getPeerManager().doCancelRequest( request );
                }
                catch ( PeerException e )
                {
                    Notification.show( e.getMessage(), Notification.Type.WARNING_MESSAGE );
                }
                updateRequestsTable();
            }
        } ).start();
    }


    /**
     * Send peer registration request for further handshakes.
     *
     * @return - vaadin button with request initializing click listener
     */
    private Button createRegisterButton()
    {
        doRequestButton = new Button();
        doRequestButton.setCaption( "Register" );
        doRequestButton.setImmediate( true );

        doRequestButton.addClickListener( new Button.ClickListener()
        {
            @Override
            public void buttonClick( final Button.ClickEvent clickEvent )
            {
                getUI().access( new Runnable()
                {
                    @Override
                    public void run()
                    {
                        if ( Strings.isNullOrEmpty( hostField.getValue() ) || Strings
                                .isNullOrEmpty( keyPhraseField.getValue() ) )
                        {
                            Notification.show( "Please specify host and key phrase." );
                        }
                        else
                        {
                            sendRegistrationRequest( hostField.getValue().trim(), keyPhraseField.getValue() );
                        }
                        updateRequestsTable();
                    }
                } );
            }
        } );

        return doRequestButton;
    }
}