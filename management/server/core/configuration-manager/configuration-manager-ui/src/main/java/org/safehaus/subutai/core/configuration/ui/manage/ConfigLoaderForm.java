package org.safehaus.subutai.core.configuration.ui.manage;


import org.safehaus.subutai.core.configuration.api.ConfigManager;
import org.safehaus.subutai.core.configuration.api.ConfigTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;


public class ConfigLoaderForm extends CustomComponent
{
    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,
    "movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private VerticalLayout verticalLayout1;
    @AutoGenerated
    private HorizontalLayout horizontalLayout2;
    @AutoGenerated
    private TextArea textArea1;
    @AutoGenerated
    private HorizontalLayout horizontalLayout1;
    @AutoGenerated
    private Button button1;
    @AutoGenerated
    private Button buttonInject;
    @AutoGenerated
    private TextField textField1;
    @AutoGenerated
    private TextField textFieldHostname;
    @AutoGenerated
    private TextField textFieldPath;

    @AutoGenerated
    private ComboBox comboBox2;
    private ConfigManager configManager;

    private String sizeHeight = "100.0%";
    private String sizeWidth = "100.0%";


    /**
     * The constructor should first build the main layout, set the composition root and then do any custom
     * initialization. <p/> The constructor will not be automatically regenerated by the visual editor.
     */
    public ConfigLoaderForm( ConfigManager configManager )
    {
        this.configManager = configManager;
        buildMainLayout();
        setCompositionRoot( mainLayout );

        // TODO add user code here
    }


    @AutoGenerated
    private AbsoluteLayout buildMainLayout()
    {
        // common part: create layout
        mainLayout = new AbsoluteLayout();
        mainLayout.setImmediate( false );
        mainLayout.setWidth( sizeWidth );
        mainLayout.setHeight( sizeHeight );

        // top-level component properties
        setWidth( sizeWidth );
        setHeight( sizeHeight );

        // verticalLayout1
        verticalLayout1 = buildVerticalLayout1();
        mainLayout.addComponent( verticalLayout1, "top:2.0px;right:12.0px;bottom:98.0px;left:0.0px;" );

        return mainLayout;
    }


    @AutoGenerated
    private VerticalLayout buildVerticalLayout1()
    {
        // common part: create layout
        verticalLayout1 = new VerticalLayout();
        verticalLayout1.setImmediate( false );
        verticalLayout1.setWidth( sizeWidth );
        verticalLayout1.setHeight( sizeHeight );
        verticalLayout1.setMargin( false );

        // horizontalLayout1
        horizontalLayout1 = buildHorizontalLayout1();
        verticalLayout1.addComponent( horizontalLayout1 );

        // horizontalLayout2
        horizontalLayout2 = buildHorizontalLayout2();
        verticalLayout1.addComponent( horizontalLayout2 );
        verticalLayout1.setExpandRatio( horizontalLayout2, 1.0f );

        return verticalLayout1;
    }


    @AutoGenerated
    private HorizontalLayout buildHorizontalLayout1()
    {
        // common part: create layout
        horizontalLayout1 = new HorizontalLayout();
        horizontalLayout1.setImmediate( false );
        horizontalLayout1.setWidth( "-1px" );
        horizontalLayout1.setHeight( "-1px" );
        horizontalLayout1.setMargin( false );

        // comboBox2
        comboBox2 = new ComboBox();
        comboBox2.setImmediate( false );
        comboBox2.setWidth( "-1px" );
        comboBox2.setHeight( "-1px" );
        comboBox2.setNullSelectionAllowed( false );
        comboBox2.setTextInputAllowed( false );
        for ( ConfigTypeEnum anEnum : ConfigTypeEnum.values() )
        {
            comboBox2.addItem( anEnum );
        }
        horizontalLayout1.addComponent( comboBox2 );

        // textField1
        textField1 = new TextField();
        textField1.setImmediate( false );
        textField1.setWidth( "-1px" );
        textField1.setHeight( "-1px" );
        horizontalLayout1.addComponent( textField1 );

        // button1
        button1 = new ConvertToJsonButton( this.configManager );
        buttonInject = new InjectIntoLxcButton( this.configManager );

        horizontalLayout1.addComponent( button1 );

        textFieldHostname = new TextField();
        textFieldHostname.setValue( "py502714478" );
        textFieldHostname.setImmediate( false );
        textFieldHostname.setWidth( "-1px" );
        textFieldHostname.setHeight( "-1px" );
        horizontalLayout1.addComponent( textFieldHostname );

        textFieldPath = new TextField();
        textFieldPath.setValue( "/etc/text.txt" );
        textFieldPath.setImmediate( false );
        textFieldPath.setWidth( "-1px" );
        textFieldPath.setHeight( "-1px" );
        horizontalLayout1.addComponent( textFieldPath );

        horizontalLayout1.addComponent( buttonInject );

        return horizontalLayout1;
    }


    @AutoGenerated
    private HorizontalLayout buildHorizontalLayout2()
    {
        // common part: create layout
        horizontalLayout2 = new HorizontalLayout();
        horizontalLayout2.setImmediate( false );
        horizontalLayout2.setWidth( sizeWidth );
        horizontalLayout2.setHeight( sizeHeight );
        horizontalLayout2.setMargin( false );

        // textArea1
        textArea1 = new TextArea();
        textArea1.setImmediate( false );
        textArea1.setWidth( sizeWidth );
        textArea1.setHeight( sizeHeight );
        textArea1.setValue( "area 1" );
        horizontalLayout2.addComponent( textArea1 );
        horizontalLayout2.setExpandRatio( textArea1, 1.0f );

        return horizontalLayout2;
    }


    private class ConvertToJsonButton extends Button
    {

        private ConvertToJsonButton( final ConfigManager configManager )
        {
            setCaption( "Convert to JSON" );
            setImmediate( true );
            setWidth( "-1px" );
            setHeight( "-1px" );
            addClickListener( new Button.ClickListener()
            {
                @Override
                public void buttonClick( final Button.ClickEvent clickEvent )
                {
                    String configPath = textField1.getValue();
                    ConfigTypeEnum typeEnum = ( ConfigTypeEnum ) comboBox2.getValue();

                    JsonObject configStr = configManager.getJsonObjectFromResources( configPath, typeEnum );
                    Gson gson = new GsonBuilder().setPrettyPrinting().create();
                    textArea1.setValue( gson.toJson( configStr ) );
                }
            } );
        }
    }


    private class InjectIntoLxcButton extends Button
    {

        private InjectIntoLxcButton( final ConfigManager configManager )
        {
            setCaption( "Inject file" );
            setImmediate( true );
            setWidth( "-1px" );
            setHeight( "-1px" );
            addClickListener( new Button.ClickListener()
            {
                @Override
                public void buttonClick( final Button.ClickEvent clickEvent )
                {
                    String hostname = textFieldHostname.getValue().trim();
                    String configPath = textFieldPath.getValue().trim();
                    ConfigTypeEnum typeEnum = ( ConfigTypeEnum ) comboBox2.getValue();
                    String config = textArea1.getValue();

                    configManager.injectConfiguration( hostname, configPath, config, typeEnum );
                }
            } );
        }
    }
}
