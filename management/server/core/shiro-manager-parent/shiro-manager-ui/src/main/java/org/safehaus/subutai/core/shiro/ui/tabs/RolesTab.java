package org.safehaus.subutai.core.shiro.ui.tabs;


import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;


/**
 * Created by talas on 1/26/15.
 */
public class RolesTab extends CustomComponent
{
    public RolesTab()
    {
        editableHeights();
        // TODO add user code here
    }


    @AutoGenerated
    void editableHeights()
    {
        VerticalLayout layout = new VerticalLayout();
        // BEGIN-EXAMPLE: component.table.editable.editableheights
        // Table with some typical data types
        final Table table = new Table( "Edible Table" );
        table.addContainerProperty( "Role Caption", String.class, null );
        table.addContainerProperty( "Permission", String.class, null );
        table.setDescription( "Roles associated with permissions." );
        table.setImmediate( true );

        // Some example data
        //TODO Retrieve roles from database
        Object people[][] = {
                { "User", "CRUD permissions" }, { "Admin", "CRUD permissions" }
        };

        // Insert the data
        for ( int i = 0; i < people.length; i++ )
        {
            Object roleCaption = people[i][0];
            Object permission = people[i][1];
            Object obj[] = {
                    roleCaption, permission
            };
            table.addItem( obj, i );
        }
        table.setPageLength( table.size() );

        // Set a custom field factory that overrides the default factory
        table.setTableFieldFactory( new DefaultFieldFactory()
        {
            private static final long serialVersionUID = -3301080798105311480L;


            @Override
            public Field<?> createField( Container container, Object itemId, Object propertyId, Component uiContext )
            {
                if ( "Permission".equals( propertyId ) )
                {
                    ComboBox select = new ComboBox();
                    select.setImmediate( true );
                    select.setTextInputAllowed( false );
                    select.setRequired( true );
                    select.setNullSelectionAllowed( false );
                    select.addItem( "CRUD permissions" );
                    select.addItem( "Read permissions" );
                    select.addItem( "Update permissions" );
                    return select;
                }

                return super.createField( container, itemId, propertyId, uiContext );
            }
        } );
        table.setEditable( true );
        // Allow switching to non-editable mode
        final CheckBox editable = new CheckBox( "Table is editable", true );
        editable.addValueChangeListener( new Property.ValueChangeListener()
        {
            private static final long serialVersionUID = 6291942958587745232L;


            public void valueChange( Property.ValueChangeEvent event )
            {
                table.setEditable( ( Boolean ) editable.getValue() );
            }
        } );
        editable.setImmediate( true );
        // END-EXAMPLE: component.table.editable.editableheights
        table.addStyleName( "editableexample" );
        layout.addComponent( editable );
        layout.addComponent( table );

        setCompositionRoot( layout );
    }
}
