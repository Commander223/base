package org.safehaus.subutai.core.shiro.ui.tabs;


import java.io.Serializable;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.FieldEvents;
import com.vaadin.ui.AbstractField;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.Form;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;


/**
 * Created by talas on 1/26/15.
 */
public class PermissionsTab extends CustomComponent
{
    public PermissionsTab()
    {
        //        editableHeights();
        editorform();
        // TODO add user code here
    }


    @AutoGenerated
    void editableHeights()
    {
        VerticalLayout layout = new VerticalLayout();

        // BEGIN-EXAMPLE: component.table.editable.editableheights
        // Table with some typical data types
        final Table table = new Table( "Edible Table" );
        table.addContainerProperty( "Name", String.class, null );
        table.setDescription( "Permissions Caption" );
        table.setImmediate( true );

        // Some example data
        //TODO Retrieve permissions from database
        Object people[] = {
                "CRUD permissions", "Read permissions", "Update permissions"
        };

        // Insert the data
        for ( int i = 0; i < people.length; i++ )
        {
            Object roleCaption = people[i];
            Object obj[] = {
                    roleCaption
            };
            table.addItem( obj, i );
        }
        table.setPageLength( table.size() );

        // Set a custom field factory that overrides the default factory
        table.setEditable( true );

        table.addStyleName( "editableexample" );

        // Allow switching to non-editable mode
        final CheckBox editable = new CheckBox( "Table is editable", true );
        editable.addValueChangeListener( new Property.ValueChangeListener()
        {
            private static final long serialVersionUID = 6291942958587745232L;


            public void valueChange( Property.ValueChangeEvent event )
            {
                table.setEditable( editable.getValue() );
            }
        } );

        editable.setImmediate( true );
        // END-EXAMPLE: component.table.editable.editableheights

        final TextField newPermission = new TextField( "Input new permission name" );
        Button savePermission = new Button( "Save Permission" );
        savePermission.addClickListener( new Button.ClickListener()
        {
            @Override
            public void buttonClick( final Button.ClickEvent event )
            {
                table.addItem( new Object[] { newPermission.getValue() } );
            }
        } );

        layout.addComponent( newPermission );
        layout.addComponent( savePermission );
        layout.addComponent( editable );
        layout.addComponent( table );

        setCompositionRoot( layout );
    }


    public class Bean implements Serializable
    {
        String name;
        double energy; // Energy content in kJ/100g


        public Bean( String name, double energy )
        {
            this.name = name;
            this.energy = energy;
        }


        public String getName()
        {
            return name;
        }


        public void setName( String name )
        {
            this.name = name;
        }


        public double getEnergy()
        {
            return energy;
        }


        public void setEnergy( double energy )
        {
            this.energy = energy;
        }
    }


    void editorform()
    {
        VerticalLayout vlayout = new VerticalLayout();

        // Create a container for such beans
        final BeanItemContainer<Bean> beans = new BeanItemContainer<Bean>( Bean.class );

        // Add some beans to it
        beans.addBean( new Bean( "Mung bean", 1452.0 ) );
        beans.addBean( new Bean( "Chickpea", 686.0 ) );
        beans.addBean( new Bean( "Lentil", 1477.0 ) );
        beans.addBean( new Bean( "Common bean", 129.0 ) );
        beans.addBean( new Bean( "Soybean", 1866.0 ) );
        beans.addItem( new Bean( "Java Bean", 0.0 ) );

        // A layout for the table and form
        HorizontalLayout layout = new HorizontalLayout();

        // Bind a table to it
        final Table table = new Table( "Beans of All Sorts", beans );
        table.setVisibleColumns( new Object[] { "name", "energy" } );
        table.setPageLength( 7 );
        table.setBuffered( false );
        layout.addComponent( table );

        // Create a form for editing a selected or new item.
        // It is invisible until actually used.
        final Form form = new Form();
        form.setCaption( "Edit Item" );
        form.setVisible( false );
        form.setBuffered( true );
        layout.addComponent( form );

        // When the user selects an item, show it in the form
        table.addValueChangeListener( new Property.ValueChangeListener()
        {
            @Override
            public void valueChange( Property.ValueChangeEvent event )
            {
                // Close the form if the item is deselected
                if ( event.getProperty().getValue() == null )
                {
                    form.setVisible( false );
                    return;
                }

                // Bind the form to the selected item
                form.setItemDataSource( table.getItem( table.getValue() ) );
                form.setVisible( true );

                // The form was opened for editing an existing item
                table.setData( null );
            }
        } );
        table.setSelectable( true );
        table.setImmediate( true );

        // Creates a new bean for editing in the form before adding
        // it to the table. Adding is handled after committing
        // the form.
        final Button newBean = new Button( "New Bean" );
        newBean.addClickListener( new Button.ClickListener()
        {
            public void buttonClick( Button.ClickEvent event )
            {
                // Create a new item; this will create a new bean
                Object itemId = beans.addItem( new Bean( "Foo", 42.0 ) );
                form.setItemDataSource( table.getItem( itemId ) );

                // Make the form a bit nicer
                form.setVisibleItemProperties( new Object[] { "name", "energy" } );
                //((TextField)form.getField("name"))
                //        .setNullRepresentation("");

                // The form was opened for editing a new item
                table.setData( itemId );

                table.select( itemId );
                table.setEnabled( false );
                newBean.setEnabled( false );
                form.setVisible( true );
            }
        } );

        // When OK button is clicked, commit the form to the bean
        final Button submit = new Button( "Save" );
        submit.addClickListener( new Button.ClickListener()
        {
            public void buttonClick( Button.ClickEvent event )
            {
                form.commit();
                form.setVisible( false ); // and close it

                // New items have to be added to the container
                if ( table.getValue() == null )
                {
                    // Commit the addition
                    table.commit();

                    table.setEnabled( true );
                    newBean.setEnabled( true );
                }
            }
        } );
        form.getFooter().addComponent( submit );

        // Make modification to enable/disable the Save button
        form.setFormFieldFactory( new DefaultFieldFactory()
        {
            @Override
            public Field createField( Item item, Object propertyId, Component uiContext )
            {
                final AbstractField field = ( AbstractField ) super.createField( item, propertyId, uiContext );
                field.addValueChangeListener( new Property.ValueChangeListener()
                {
                    @Override
                    public void valueChange( Property.ValueChangeEvent event )
                    {
                        submit.setEnabled( form.isModified() );
                    }
                } );
                if ( field instanceof TextField )
                {
                    final TextField tf = ( TextField ) field;
                    tf.addTextChangeListener( new FieldEvents.TextChangeListener()
                    {
                        @Override
                        public void textChange( FieldEvents.TextChangeEvent event )
                        {
                            if ( form.isModified() || !event.getText().equals( tf.getValue() ) )
                            {
                                submit.setEnabled( true );

                                // Not needed after first event unless
                                // want to detect also changes back to
                                // unmodified value.
                                tf.removeListener( this );

                                // Has to be reset because the
                                // removeListener() setting causes
                                // updating the field value from the
                                // server-side.
                                tf.setValue( event.getText() );
                            }
                        }
                    } );
                }
                field.setImmediate( true );

                return field;
            }
        } );

        Button cancel = new Button( "Cancel" );
        cancel.addClickListener( new Button.ClickListener()
        {
            public void buttonClick( Button.ClickEvent event )
            {
                form.discard();  // Not really necessary
                form.setVisible( false ); // and close it
                table.discard(); // Discards possible addItem()
                table.setEnabled( true );
                if ( table.getData() != null )
                {
                    beans.removeItem( table.getData() );
                }
                newBean.setEnabled( true );
            }
        } );
        form.getFooter().addComponent( cancel );

        layout.setSpacing( true );
        vlayout.addComponent( layout );
        vlayout.addComponent( newBean );
        setCompositionRoot( vlayout );
    }
}
