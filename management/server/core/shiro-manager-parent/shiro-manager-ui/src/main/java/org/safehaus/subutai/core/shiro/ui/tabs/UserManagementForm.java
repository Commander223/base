package org.safehaus.subutai.core.shiro.ui.tabs;


import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;


/**
 * Created by talas on 1/21/15.
 */
//public class UserManagementForm
//{
//    private final VerticalLayout contentRoot;
//
//
//    public UserManagementForm()
//    {
//        this.contentRoot = new VerticalLayout(  );
//        contentRoot.setSpacing( true );
//        contentRoot.setMargin( true );
//    }
//}

public class UserManagementForm extends CustomComponent
{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,
    "movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private VerticalLayout verticalLayout_1;
    @AutoGenerated
    private Table usersTable;


    /**
     * The constructor should first build the main layout, set the composition root and then do any custom
     * initialization.
     *
     * The constructor will not be automatically regenerated by the visual editor.
     */
    public UserManagementForm()
    {
        //        buildMainLayout();
        //        setCompositionRoot(mainLayout);
        editableHeights();
        // TODO add user code here
    }


    //    @AutoGenerated
    //    private AbsoluteLayout buildMainLayout()
    //    {
    //        // common part: create layout
    //        mainLayout = new AbsoluteLayout();
    //        mainLayout.setImmediate( false );
    //        mainLayout.setWidth( "100%" );
    //        mainLayout.setHeight( "100%" );
    //
    //        // top-level component properties
    //        setWidth( "100.0%" );
    //        setHeight( "100.0%" );
    //
    //        // verticalLayout_1
    //        verticalLayout_1 = buildVerticalLayout_1();
    //        mainLayout.addComponent( verticalLayout_1, "top:180.0px;bottom:189.0px;left:320.0px;" );
    //
    //        return mainLayout;
    //    }


    public static String editableheightsDescription = "<h1>Height of Components in Editable Table</h1>" +
            "<p>TextFields components are normally a bit lower in Table than usually, " +
            "as it makes the table more compact and, more importantly, prevents change of " +
            "line height when switching between editable and non-editable mode. " +
            "Some components do not have similar " +
            "adjustments, which can make the table rows uneven.</p>" +
            "<p><b>Solution 1:</b> Override the CSS rules that make TextFields low in Table. (Done in the example "
            + "below)</p>" +
            "<p><b>Solution 2:</b> Use CSS to make the other components (DateField, ComboBox) the same height as "
            + "TextField</p>";


    @AutoGenerated
    void editableHeights()
    {
        VerticalLayout layout = new VerticalLayout();
        // BEGIN-EXAMPLE: component.table.editable.editableheights
        // Table with some typical data types
        final Table table = new Table( "Edible Table" );
        table.addContainerProperty( "Name", String.class, null );
        table.addContainerProperty( "Login", String.class, null );
        table.addContainerProperty( "Password", PasswordField.class, null );
        table.addContainerProperty( "Email", String.class, null );
        table.addContainerProperty( "Role", String.class, null );
        table.setDescription( "All users registered in shiro" );
        table.setWidth( "80.0%" );
        table.setHeight( "-1px" );
        table.setImmediate( true );

        // Some example data
        Object people[][] = {
                { "Galileo", "galileo", new PasswordField(), "galileo@mail.com", "Admin" },
                { "Monnier", "monnier", new PasswordField(), "monnier@mail.com", "User" },
                { "Oterma", "oterma", new PasswordField(), "oterma@mail.com", "User" },
                { "Valtaoja", "valtaoja", new PasswordField(), "valtaoja@mail.com", "User" }
        };

        // Insert the data
        for ( int i = 0; i < people.length; i++ )
        {
            Object name = people[i][0];
            Object login = people[i][1];
            Object password = people[i][2];
            Object email = people[i][3];
            Object role = people[i][4];
            Object obj[] = {
                    name, login, password, email, role
            };
            table.addItem( obj, i );
        }
        table.setPageLength( table.size() );

        // Set a custom field factory that overrides the default factory
        table.setTableFieldFactory( new DefaultFieldFactory()
        {
            private static final long serialVersionUID = -3301080798105311480L;


            @Override
            public Field<?> createField( Container container, Object itemId, Object propertyId, Component uiContext )
            {
                if ( "Role".equals( propertyId ) )
                {
                    ComboBox select = new ComboBox();
                    select.setImmediate( true );
                    select.setTextInputAllowed( false );
                    select.setRequired( true );
                    select.setNullSelectionAllowed( false );
                    select.addItem( "Admin" );
                    select.addItem( "User" );
                    return select;
                }

                return super.createField( container, itemId, propertyId, uiContext );
            }
        } );
        table.setEditable( true );
        // Allow switching to non-editable mode
        final CheckBox editable = new CheckBox( "Table is editable", true );
        editable.addValueChangeListener( new Property.ValueChangeListener()
        {
            private static final long serialVersionUID = 6291942958587745232L;


            public void valueChange( ValueChangeEvent event )
            {
                table.setEditable( ( Boolean ) editable.getValue() );
            }
        } );
        editable.setImmediate( true );
        // END-EXAMPLE: component.table.editable.editableheights
        table.addStyleName( "editableexample" );
        layout.addComponent( editable );
        layout.addComponent( table );

        setCompositionRoot( layout );
    }
}