#!/bin/bash

# ==========================================================================
# Set of functions that replace lxc-xxx functionality with a mix of utility
# functions.
# ==========================================================================

# sources everything else we need
. /etc/subutai/chk_ops
. /etc/subutai/zfs_ops


# simply check if running before stopping
function lxc_stop {
  lxc="$1"
  
  if [ "$lxc" == "`lxc-ls --running | grep $lxc`" ]; then
    lxc-stop -n $lxc
  fi
}


# waits until the networking comes up on a container (arg $1)
# if container is off starts it up and waits
# sleeps for maximum of (arg $2) seconds: defaults to 10 seconds
function lxc_wait_net {
  lxc="$1"
  waitmax="$2"

  lxc-start -d -n $lxc
  lxc-wait -n $lxc -s 'RUNNING' -t 5

  if [ -z "$waitmax" ]; then
    waitmax=10
  fi

  while [ $waitmax -gt 0 ]; do
    sleep 1
    ipv4=`lxc-ls -f | grep $lxc | awk '{print $3}'`

    if [ "$ipv4" != "-" ]; then
      msg_notice "    - container \"$lxc\" online with ip = $ipv4"
      break
    fi
    
    waitmax=`expr $waitmax - 1`
  done
}


# --------------------------------------------------------------------------
# function: assertion to check if an LXC container exists, exit on failure
# --------------------------------------------------------------------------
#
# usage:
# ------
#    lxc_exists $lxc $usage

function lxc_assert_no {
  lxc="$1"
  usage="$2"

  if [ -z "$lxc" ]; then
    msg_error "No value provided for container's name. Aborting ..."
    show_usage "$usage"
  fi

  if [ -n "`lxc-ls "$lxc" | grep "$lxc"`" ]; then
    msg_error "Container \"$lxc\" exists. Aborting ..."
    show_usage "$usage"
  else
    msg_info "    - check passed: container \"$lxc\" exists."
  fi
}


function lxc_assert {
  lxc="$1"
  usage="$2"

  if [ -z "$lxc" ]; then
    msg_error "No value provided for container's name. Aborting ..."
    show_usage "$usage"
  fi

  if [ -z "`lxc-ls "$lxc" | grep "$lxc"`" ]; then
    msg_error "Container \"$lxc\" does NOT exist. Aborting ..."
    show_usage "$usage"
  else
    msg_info "    - check passed: container \"$lxc\" exists."
  fi
}


# --------------------------------------------------------------------------
# function: clones a parent dataset for a new child partition
# --------------------------------------------------------------------------
#
# usage:
# ------
#    lxc-clone-ds $parent $child $partition $zpool $usage

function lxc_clone_ds {
  parent="$1"
  child="$2"
  partition="$3"
  pool="$4"
  usage="$5"

  child_ds="$pool/$child-$partition"
  parent_snap="$pool/$parent-$partition@template"

  zfs_assert_snap "$parent_snap" "$usage"
  zfs clone "$parent_snap" "$child_ds"
  msg_info "    - \"$child_ds\" cloned from \"$parent_snap\""
}


# --------------------------------------------------------------------------
# function lxc_clone: instead of lxc-clone we use our very own clone op
# --------------------------------------------------------------------------
#
# usage:
# ------
#    lxc_clone $parent $child $usage
#
# execution plan:
# ---------------
# (1) perform sanity checks
#       - check that child does NOT exist
#       - check that parent does exist
#       - check that parent is a template
# (2) setup skeleton of new cloned child container
#       - create home and rootfs
#       - stream and filter config with var substitution
# (3) zfs clone snapshots for child datasets
# (4) alter hostname from /etc/hosts and /etc/hostname

function lxc_clone {
  # nice names for args
  parent="$1"
  child="$2"
  usage="$3"

  # keep it tight with convenience vars
  parent_home=/var/lib/lxc/$parent
  parent_conf=$parent_home/config
  child_home=/var/lib/lxc/$child
  child_rootfs=$child_home/rootfs
  child_conf=$child_home/config

  # (1) perform sanity checks
  lxc_assert_no $child "`usage`"
  lxc_assert $parent "`usage`"

  if [ "`is_template $parent`" == "false" ]; then
    msg_notice "    - parent \"$parent\" is not a template ... promoting"
    subutai-template $parent
  else
    msg_info "    - parent \"$parent\" is a template"
  fi

  # (2) setup skeleton of new cloned child container
  mkdir -p $child_rootfs
  cat $parent_conf | sed                                         \
     -e "s/lxc\.utsname.*/lxc\.utsname = $child/"                \
     -e "s/subutai\.parent.*/subutai\.parent = $parent/"         \
     -e "s/\/var\/lib\/lxc\/$parent/\/var\/lib\/lxc\/$child/g"   \
     -e "s/\/lxc\/$parent/\/lxc\/$child/g"                       \
     -e "s/\/lxc-data\/$parent/\/lxc-data\/$child/g" > $child_conf
  cp $parent_home/fstab $child_home

  # (3) zfs clone snapshots for child datasets
  zfs clone lxc/$parent@template lxc/$child
  zfs set mountpoint=$child_rootfs lxc/$child
  lxc_clone_ds $parent $child opt lxc "$usage"
  lxc_clone_ds $parent $child var lxc-data "$usage"
  lxc_clone_ds $parent $child home lxc-data "$usage"

  # (4) alter hostname from /etc/hosts and /etc/hostname
  echo $child > $child_rootfs/etc/hostname
  cat $parent_home/rootfs/etc/hosts | sed \
    -e "s/$parent/$child/g" > $child_rootfs/etc/hosts
}


