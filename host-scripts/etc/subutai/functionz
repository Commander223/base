#!/bin/bash


. /etc/subutai/config
. /etc/subutai/bsfl
init


# Function addmount:
# -----------------------------------------------------------------------------
# 
# Usage: 
# ======
#
# addmount master opt  lxc
# addmount master var  lxc-data
# addmount master home lxc-home
#
# Description:
# =============
#
# Mainly used by the master creation process to:
#
# o Creates a zfs dataset for an LXC mount point
# o Checks to make sure it is properly created and mounted
# o Adds the LXC mount entries to the lxc configuration file of container
# o Moves over data contained in the rootfs for the mount to the dataset
# o Snapshots the newly created populated filesystems with @template

function addmount {
  name=$1
  mount=$2
  zpool=$3

  dataset=$zpool/$name-$mount
  echo Creating $dataset dataset for $mount mount entry
  zfs create $dataset

  if [ -z "`zfs list $dataset`" ]; then
    echo Could not create $dataset dataset 
    exit 1
  else
    echo Created $dataset dataset, adding $mount mount entry
    echo lxc.mount.entry = /$dataset $mount none bind,rw 0 0 \
         >> /var/lib/lxc/$name/config
  fi
  echo Copying $mount data from rootfs to new $dataset dataset
  pushd .
  mountpath=/var/lib/lxc/$name/rootfs/$mount
  cd $mountpath

  if [ -n "`ls -A $mountpath`" ]; then
    # We use tar to preserve permissions: do NOT use cp or mv
    tar -c * | tar -x -C /$dataset
    echo Deleting $mount contents from rootfs
    rm -rf /var/lib/lxc/$name/rootfs/$mount/*
  else
    echo Nothing within $mountpath, abandoning copy
  fi

  popd

  # Time to Snapshot and Apply Holds
  zfs snapshot $dataset'@template'
  zfs hold keep $dataset'@template'
  return
}


function check_exists {
  container="$1"
  usage="$2"

  if [ -z "$container" ]; then
    msg_error "No value provided for containe's name. Aborting ..."
    show_usage "$usage"
  fi

  if [ -z "`lxc-ls "$container" | grep "$container"`" ]; then
    msg_error "Container \"$container\" does not exist. Aborting ..."
    show_usage "$usage"
  else 
    msg_ok "Container \"$container\" exists."
  fi
}


function check_missing {
  container="$1"
  usage="$2"

  if [ -z "$container" ]; then
    msg_error "No value provided for containe's name. Aborting ..."
    show_usage "$usage"
  fi

  if [ -n "`lxc-ls "$container" | grep "$container"`" ]; then
    msg_error "Container \"$container\" exists. Aborting ..."
    show_usage "$usage"
  else 
    msg_ok "Container \"$container\" does not exist."
  fi
}


function check_parent {
  parent="$1"
  usage="$2"

  if [ -z "$parent" ]; then 
    msg_error "No value provided for parent container. Aborting ..."
    show_usage "$usage"
  fi

  if [ -z "`lxc-ls "$parent" | grep "$parent"`" ]; then 
    msg_error "Parent container \"$parent\" does not exist. Aborting ..."
    show_usage "$usage"
  else
    msg_ok "Parent container \"$parent\" exists."
  fi
}


function check_child {
  child="$1"
  usage="$2"

  if [ -z "$child" ]; then 
    msg_error "No value provided for child container. Aborting ..."
    show_usage "$usage"
  fi

  if [ -n "`lxc-ls "$child" | grep "$child"`" ]; then 
    msg_error "Child container \"$child\" already exists. Aborting ..."
    show_usage "$usage"
  else
    msg_ok "Child container \"$child\" does not exist."
  fi
}


# URGENT: this is a stub function and needs to be properly implemented
# this function needs to ask Subutai if a template name is registered 
# already. Since this functionality is not available I just stubbed it 
# out with a call to is_template. 
function is_registered {
  echo `is_template $1`
}


# URGENT: this is a stub function and needs to be properly implemented
# this function needs to take the supplied tsar file and upload and 
# register it with the Subutai management server.
function send_n_register {
  tsar=$1

  msg_ok "TSAR file $tsar registered and sent to management server"
}


# checks if the container (arg $1) is a template, echo "true"/"false"
function is_template {
  c="$1"
  s=`zfs list -t snapshot -o name -H | grep "lxc/$c@template" | grep -v '\-opt'`

  if [ -z "$s" ]; then
    echo false
  else
    echo true
  fi
}

# gets the parent of a container
# first argument $1 is the name of the child container
function get_parent {
  c="$1"

  if [ "$c" == "master" ]; then
    echo master
    return 1
  fi

  snap=`zfs list -t snapshot -o name -H | egrep "lxc/.*@$c" | grep -v '\-opt'`
  echo `ctnr_from_ds $snap`
}

# extracts the container name from a dataset or a dataset snapshot
function ctnr_from_ds {
  ds="$1"
  echo $ds | sed -e 's/lxc.*\///' -e 's/@.*//' -e 's/-.*//'
}

# extracts the zpool name from a dataset or a dataset snapshot
function pool_from_ds {
  ds="$1"
  echo $ds | sed -e 's/\/.*//'
}

# extracts the snapshot name from a dataset snapshot
function snap_from_ds {
  ds="$1"
  echo $ds | sed -e 's/.*@//'
}

# extracts the partition name from a dataset or a dataset snapshot
function part_from_ds {
  ds="$1"
  echo $ds | sed -e 's/lxc.*\///' -e 's/@.*//' -e 's/.*-//'
}


# lists all the templates available
function list_templates {
  for line in `zfs list -t snapshot -o name -H \
    | grep template               \
    | egrep -v '\-.*'`; do
    echo `ctnr_from_ds $line`
  done
}


function check_lxc {
  return
}


