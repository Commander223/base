#!/bin/bash


. /etc/subutai/config
. /etc/subutai/bsfl
init


# Function addmount:
# -----------------------------------------------------------------------------
# 
# Usage: 
# ======
#
# addmount master opt  lxc
# addmount master var  lxc-data
# addmount master home lxc-home
#
# Description:
# =============
#
# Mainly used by the master creation process to:
#
# o Creates a zfs dataset for an LXC mount point
# o Checks to make sure it is properly created and mounted
# o Adds the LXC mount entries to the lxc configuration file of container
# o Moves over data contained in the rootfs for the mount to the dataset
# o Snapshots the newly created populated filesystems with @template

function addmount {
  name=$1
  mount=$2
  zpool=$3

  dataset=$zpool/$name-$mount
  echo Creating $dataset dataset for $mount mount entry
  zfs create $dataset

  if [ -z "`zfs list $dataset`" ]; then
    echo Could not create $dataset dataset 
    exit 1
  else
    echo Created $dataset dataset, adding $mount mount entry
    echo lxc.mount.entry = /$dataset $mount none bind,rw 0 0 \
         >> /var/lib/lxc/$name/config
  fi
  echo Copying $mount data from rootfs to new $dataset dataset
  pushd .
  mountpath=/var/lib/lxc/$name/rootfs/$mount
  cd $mountpath

  if [ -n "`ls -A $mountpath`" ]; then
    # We use tar to preserve permissions: do NOT use cp or mv
    tar -c * | tar -x -C /$dataset
    echo Deleting $mount contents from rootfs
    rm -rf /var/lib/lxc/$name/rootfs/$mount/*
  else
    echo Nothing within $mountpath, abandoning copy
  fi

  popd

  # Time to Snapshot and Apply Holds
  zfs snapshot $dataset'@template'
  zfs hold keep $dataset'@template'
  return
}


function check_exists {
  container="$1"
  usage="$2"

  if [ -z "$container" ]; then
    msg_error "No value provided for containe's name. Aborting ..."
    show_usage "$usage"
  fi

  if [ -z "`lxc-ls "$container" | grep "$container"`" ]; then
    msg_error "Container \"$container\" does not exist. Aborting ..."
    show_usage "$usage"
  else 
    msg_ok "Container \"$container\" exists."
  fi
}


function check_parent {
  parent="$1"
  usage="$2"

  if [ -z "$parent" ]; then 
    msg_error "No value provided for parent container. Aborting ..."
    show_usage "$usage"
  fi

  if [ -z "`lxc-ls "$parent" | grep "$parent"`" ]; then 
    msg_error "Parent container \"$parent\" does not exist. Aborting ..."
    show_usage "$usage"
  else
    msg_ok "Parent container \"$parent\" exists."
  fi
}


function check_child {
  child="$1"
  usage="$2"

  if [ -z "$child" ]; then 
    msg_error "No value provided for child container. Aborting ..."
    show_usage "$usage"
  fi

  if [ -n "`lxc-ls "$child" | grep "$child"`" ]; then 
    msg_error "Child container \"$child\" already exists. Aborting ..."
    show_usage "$usage"
  else
    msg_ok "Child container \"$child\" does not exist."
  fi
}


function check_lxc {
  return
}


