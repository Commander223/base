#!/bin/bash

# Also sources everything we need
. /etc/subutai/funcs

lxc="$1"

function usage {
  echo -----------------------------------------------------------------------
  echo Usage: Converts and registers an instance container as a template
  echo
  echo "	"subutai-template container
  echo
  echo -----------------------------------------------------------------------
}

# The master is already a template
if [ "$lxc" == "master" ]; then
  msg_error "The master is already a template. Aborting ..."
  exit 1 
fi

# Plan for creating a template from a container
# -----------------------------------------------------------------------------
# (1) perform sanity checks first
#     - container MUST exist
#     - container MUST NOT have a 'template' snapshot
#     - container name MUST NOT be in the template registry
#     - container parent MUST be present in the template registry
# (2) replace package manifest next to config file
# (3) commit config point changes and push to site git as new branch from parent
# (4) shutdown & '@template' snapshot all mounts, and apply "keep" holds
# (5) generate delta images of all filesystems: 
#     'pool/parent-partition@child' -> 'pool/child-partition@template'
# (6) generate the tsar file from deltas, and package info
# (7) register and send tsar file to subutai management server



# -----------------------------------------------------------------------------
# (1) perform some sanity checks
# -----------------------------------------------------------------------------
lxc_assert $lxc

# check to make sure the container is NOT already a template
if [ "`zfs_is_template $lxc`" == "true" ]; then
  msg_error "Container \"$lxc\" is already a template. Aborting ..."
  exit 1
else 
  msg_info "    - check passed: \"$lxc\" is NOT a template"
fi

# check to make sure container is NOT registered as a template
if [ "`is_registered $lxc`" == "true" ]; then
  msg_error "A template with name \"$lxc\" is registered. Aborting ..."
  exit 1
else 
  msg_info "    - check passed: \"$lxc\" is NOT registered"
fi

parent=`zfs_get_parent $lxc`
lxc_assert $parent
# check to make sure the parent is a template
if [ "`zfs_is_template $parent`" == "false" ]; then
  msg_error "Parent \"$parent\" is NOT a template. Aborting ..."
  exit 1
else 
  msg_info "    - check passed: parent \"$parent\" is a template"
fi

# check to make sure the parent is registered
if [ "`is_registered $parent`" == "false" ]; then
  msg_error "Parent \"$parent\" is NOT registered. Aborting ..."
  exit 1
else 
  msg_info "    - check passed: parent \"$parent\" is registered"
fi


# start container if it is stopped
if [ -z "`lxc-ls --running | grep $lxc`" ]; then
  lxc-start -d -n $lxc
fi

# -----------------------------------------------------------------------------
# (2) replace package manifest next to config file
# -----------------------------------------------------------------------------

lxc_home=/var/lib/lxc/$lxc
echo `lxc-attach -n $lxc -- dpkg -l` > $lxc_home/packages

# -----------------------------------------------------------------------------
# (3) git operations
# -----------------------------------------------------------------------------

# add and commit all uncommitted files (should be some: /etc/hosts)
uuid=`git_add_commit $lxc`

# inject the commit UUID 
echo "subutai.git.uuid = $uuid" >> $lxc_home/config
msg_info "    - commit UUID extracted: $uuid"

# push to the subutai site git repository if defined
if [ -n "$SUBUTAI_SITE_GIT" ]; then
  git_remote_push $lxc
fi


# -----------------------------------------------------------------------------
# (4) shutdown & '@template' snapshot all mounts, and apply "keep" holds
# -----------------------------------------------------------------------------

lxc-stop -n $lxc
zfs snapshot lxc/$lxc@template
zfs hold keep lxc/$lxc@template

zfs snapshot lxc/$lxc-opt@template
zfs hold keep lxc/$lxc-opt@template

zfs snapshot lxc-data/$lxc-var@template
zfs hold keep lxc-data/$lxc-var@template

zfs snapshot lxc-data/$lxc-home@template
zfs hold keep lxc-data/$lxc-home@template


# -----------------------------------------------------------------------------
# (5) generate delta images of all filesystems: 
#     'pool/parent-partition@child' -> 'pool/child-partition@template'
# -----------------------------------------------------------------------------

deb_root="$SUBUTAI_TMPDIR/$lxc"
deltas="$deb_root/deltas"
mkdir -p $deltas
zfs send -I "lxc/$parent@template" "lxc/$lxc@template" > "$deltas/rootfs.delta"
zfs send -I "lxc/$parent-opt@template" "lxc/$lxc-opt@template" > "$deltas/opt.delta"
zfs send -I "lxc-data/$parent-var@template" "lxc-data/$lxc-var@template" > "$deltas/var.delta"
zfs send -I "lxc-data/$parent-home@template" "lxc-data/$lxc-home@template" > "$deltas/home.delta"


# -----------------------------------------------------------------------------
# (6) generate the tsar file from git differential, and deltas
# -----------------------------------------------------------------------------

cp /var/lib/lxc/$lxc/config "$deb_root"
cp /var/lib/lxc/$lxc/fstab  "$deb_root"
cp /var/lib/lxc/$lxc/packages  "$deb_root"

pkg=`deb_pkg $lxc`

# delete me after deb_pkg works
#pushd . >> /dev/null
#cd $SUBUTAI_TMPDIR
#tar -zcf $lxc.tsar $lxc
#popd >> /dev/null

# -----------------------------------------------------------------------------
# (7) register and send tsar file to subutai management server
# -----------------------------------------------------------------------------

send_n_register $pkg


