#!/bin/sh
set -e

BASE=$(pwd)
sh -c 'cd $BASE'
echo $BASE
cd ../workspace
SOURCE=$(pwd)"/big-data/lxc/lxc"
TARGET="/var/lib/jenkins/Automation/Bigdata/lxc"
echo $SOURCE
echo $TARGET
cd $BASE

LXCSOURCE="/var/lib/lxc"
pattern="base-container"

cd $LXCSOURCE
pwd

containerStatus=$(lxc-ls --fancy | grep $pattern | cut -d' ' -f3)
echo "ContainerStatus: "$containerStatus
runningStatus="RUNNING"

if [ $containerStatus = $runningStatus ]; then
	echo $pattern " is running.."
	sudo lxc-stop -n $pattern
	sudo lxc-destroy -n $pattern
	sudo lxc-create -t ubuntu -n $pattern
else
        echo $pattern " is stopped.."
        sudo lxc-destroy -n $pattern
        sudo lxc-create -t ubuntu -n $pattern

fi

BRIDGE="br0"
sed -i 's/lxcbr0/'"$BRIDGE"'/g' $LXCSOURCE/$pattern/config

cp $BASE/repo/sources.list $LXCSOURCE/$pattern/rootfs/etc/apt/

#Copying logstash&jmxtrans deb files.
cp $BASE/repo/ksks-logstash-1.0.1-amd64.deb $LXCSOURCE/$pattern/rootfs/root/
cp $BASE/repo/jmxtrans-1.0.1-amd64.deb $LXCSOURCE/$pattern/rootfs/root/
cp $BASE/repo/collectd-conf.sh $LXCSOURCE/$pattern/rootfs/root/
cp $BASE/repo/deleter.py $LXCSOURCE/$pattern/rootfs/root/

#start base-container
sudo lxc-start -n $pattern -d
sleep 20
containerIP=$(lxc-ls --fancy | grep $pattern | cut -d' ' -f5)
echo $containerIP
ssh-keygen -f "/root/.ssh/known_hosts" -R $containerIP

#Read Root Passwords for Template LXC
cd $BASE
passwd=$(cat password.dat)
/$BASE/presettings.exp.new $containerIP ubuntu ubuntu $passwd
/$BASE/postsettings.exp.new $containerIP root  $passwd

cd $LXCSOURCE
#removing logstash and jmxtrans deb
rm $LXCSOURCE/$pattern/rootfs/root/ksks-logstash-1.0.1-amd64.deb
rm $LXCSOURCE/$pattern/rootfs/root/jmxtrans-1.0.1-amd64.deb
rm $LXCSOURCE/$pattern/rootfs/root/collectd-conf.sh
rm $LXCSOURCE/$pattern/rootfs/root/deleter.py

#closing base container
sudo lxc-stop -n $pattern
#updating gmond.conf file
mv $BASE/repo/gmond.conf $pattern/rootfs/etc/ganglia/
cd $BASE
fileName=`ls | awk '{print $1}' | head -1`
echo "FILENAME: " $fileName

cp $SOURCE/var/lib/lxc/check.sh $LXCSOURCE/$pattern/rootfs/etc/init.d/
cp -a $LXCSOURCE/$pattern $BASE/$fileName/var/lib/lxc/ 
#cp $SOURCE/var/lib/lxc/README.md $BASE/$fileName/var/lib/lxc/

if ls *.deb ; then
        rm  *.deb
fi

#cd $BASE/$fileName/var/lib/lxc/
#cp check.sh $BASE/$fileName/var/lib/lxc/$pattern/rootfs/etc/init.d/

cd $BASE/$fileName/var/lib/lxc/$pattern/rootfs/etc/
sed -i '10 a\/etc/init.d/check.sh' rc.local
sed -i '13 a\/usr/bin/modifyHostname.sh' rc.local
sed -i '14 a\service logstash start' rc.local

cd $BASE/$fileName/var/lib/lxc/
tar -cvpzf $pattern".tar.gz" $pattern/
rm -rf $pattern/

cd $BASE
cp -a $SOURCE/DEBIAN $BASE/$fileName/
cp -a $SOURCE/var $BASE/$fileName/
cp -a $SOURCE/etc $BASE/$fileName/
rm $BASE/$fileName/var/lib/lxc/README.md
rm $BASE/$fileName/var/lib/lxc/check.sh

lineNumberVersion=$(sed -n '/Version:/=' $fileName/DEBIAN/control)
lineNumberPackage=$(sed -n '/Package:/=' $fileName/DEBIAN/control)
lineVersion=$(sed $lineNumberVersion!d $fileName/DEBIAN/control)
linePackage=$(sed $lineNumberPackage!d $fileName/DEBIAN/control)

version=$(echo $lineVersion | awk -F":" '{split($2,a," ");print a[1]}')
package=$(echo $linePackage | awk -F":" '{split($2,a," ");print a[1]}')
echo $version
echo $package

versionFirst=$(echo $version | awk -F"." '{print $1}')
versionSecond=$(echo $version | awk -F"." '{print $2}')
versionThird=$(echo $version | awk -F"." '{print $3}')

echo $versionFirst
echo $versionSecond
echo $versionThird

updatedVersion=$(echo `expr $versionThird + 1`)
updatedRelease=$versionFirst.$versionSecond.$versionThird
replaceVersion="Version: $updatedRelease"
sed -i $fileName/DEBIAN/control -e $lineNumberVersion's!.*!'"$replaceVersion"'!'
packageName=$package-$updatedRelease"-amd64"
echo $packageName

if [ "$fileName" != "$packageName" ] ;then
echo "different!!"
mv $fileName $packageName
fi

find ./$packageName -name "*~" -print0 | xargs -0 rm -rf
rm $packageName/DEBIAN/md5sums
md5sum `find ./$packageName -type f | awk '/.\//{ print substr($0, 3) }'` >> $packageName/DEBIAN/md5sums
dpkg-deb -z8 -Zgzip --build $packageName/

cp $packageName".deb" $TARGET/
