#!/bin/bash
set -e
usage() {
  echo "Usage: initializeVariables {product_name}"
  echo "Usage: getSourcesToRelevantDirectories {product_name}"
  echo "Usage: generateDebianPackage {product_name}"
  echo "Example: generateDebianPackage hadoop"
  exit 1
}


initializeVariables() {
  if [[ $1 == "" ]]; then
    usage
  fi
  productName=$1
  productNameUppercase="$(tr '[:lower:]' '[:upper:]' <<< ${productName:0:1})${productName:1}"
  BASE=/var/lib/jenkins/jobs/master.bigdata.$productName/$productNameUppercase
  SOURCE="/var/lib/jenkins/jobs/master.get_branch_repo/workspace/big-data/$productName/$productName"
  TARGET="/var/lib/jenkins/Automation/Bigdata/$productName"

  pushd $BASE
  if ls *.deb ; then
    rm  *.deb
  fi
  fileName=`ls | grep subutai | awk '{print $1}' | head -1`
  if [[ $fileName == "" ]]; then
    fileName="subutai-$productName"
    mkdir -p $fileName
  fi
  popd
}


getSourcesToRelevantDirectories() {
  initializeVariables $1
  pushd $BASE
  # Clear the previous contents of the directory
  if [ -d $BASE/$fileName ]; then
    rm -r $BASE/$fileName
  fi
  mkdir $BASE/$fileName
  # Copy the sources that are pulled from the version control system
  cp -a -r $SOURCE/* $BASE/$fileName
  popd
}


generateDebianPackage() {
  updatePackageContent $1
  pushd $BASE
  generateMD5Sum $1
  dpkg-deb -z8 -Zgzip --build $packageName/
  cp $packageName".deb" $TARGET/
  popd
}


generateDebianPackageWithoutMD5() {
  updatePackageContent $1
  pushd $BASE
  dpkg-deb -z8 -Zgzip --build $packageName/
  cp $packageName".deb" $TARGET/
  popd
}


updatePackageContent() {
  initializeVariables $1
  pushd $BASE

  lineNumberVersion=$(sed -n '/Version:/=' $fileName/DEBIAN/control)
  lineNumberPackage=$(sed -n '/Package:/=' $fileName/DEBIAN/control)
  lineVersion=$(sed $lineNumberVersion!d $fileName/DEBIAN/control)
  linePackage=$(sed $lineNumberPackage!d $fileName/DEBIAN/control)

  version=$(echo $lineVersion | awk -F":" '{split($2,a," ");print a[1]}')
  package=$(echo $linePackage | awk -F":" '{split($2,a," ");print a[1]}')

  versionFirst=$(echo $version | awk -F"." '{print $1}')
  versionSecond=$(echo $version | awk -F"." '{print $2}')
  versionThird=$(echo $version | awk -F"." '{print $3}')

  # Increment the least significant version by 1
  #updatedVersion=$(echo `expr $versionThird + 1`)
  updatedVersion=$versionThird

  updatedRelease=$versionFirst.$versionSecond.$updatedVersion
  replaceVersion="Version: $updatedRelease"

  arch=$(getArchitecture)
  packageName="$package"_"$updatedRelease"_"$arch"

  # Update control file with the incremented version
  sed -i $fileName/DEBIAN/control -e $lineNumberVersion's!.*!'"$replaceVersion"'!'

  if [ "$fileName" != "$packageName" ] ;then
    mv $fileName $packageName
  fi

  find ./$packageName -name "*~" -print0 | xargs -0 rm -rf
  if [ -f "$packageName/DEBIAN/md5sums" ]; then
    rm $packageName/DEBIAN/md5sums
  fi
  popd
}


generateMD5Sum() {
  initializeVariables $1
  pushd $BASE
  md5sum `find ./$packageName -type f | awk '/.\//{ print substr($0, 3) }'` >> $packageName/DEBIAN/md5sums
  popd
}


getArchitecture() {
  #TODO get the actual architecture from the debian packages control file
  echo "all"
}

generateRepoPackage() {
  #check initial productName is not empty
  if [[ $1 == "" ]]; then
    usage
  fi
  
  #Basic path definitions
  productName=$1
  productNameUppercase="$(tr '[:lower:]' '[:upper:]' <<< ${productName:0:1})${productName:1}"
  BASE=/var/lib/jenkins/jobs/master.bigdata.$productName/$productNameUppercase
  SOURCE="/var/lib/jenkins/jobs/master.get_branch_repo/workspace/big-data/$productName/$productName"
  TARGET="/var/lib/jenkins/Automation/Bigdata/$productName"
  PACK="/var/lib/jenkins/Automation/Automation_ISO/mgmt-repo/template-repo-package/"
  ISOPATH="/var/lib/jenkins/Automation/Automation_ISO/work/custom-iso/pool/extras/"
 
  pushd $BASE
  
  #get package full name, for example:subutai-hadoop_1.0.12_all.deb
  currentPackage=`ls -lt $TARGET | awk '{ print $9 }' | grep .deb` 
  echo "CurrentPackageName: $currentPackage"
  
  #delete repo package: subutai-repo-hadoop_1.0.12_all.deb
  if [ -f "$ISOPATH/subutai-repo-$currentPackage" ]; then
      rm $ISOPATH/subutai-repo-$currentPackage 
  fi

  #check package starts with subutai tag
  if [[ "$currentPackage" == "subutai"* ]]; then
     shortCurrentPackage=`echo "$currentPackage" | awk '{print substr($1,9); }'  | awk '{print substr($0, 0, length($0)-4)}'`
     echo "shortCurrentPackage: $shortCurrentPackage"
  fi

  purePackageName=`echo $shortCurrentPackage | awk -F "." '{print $1}' | awk '{print substr($0, 0, length($0)-2)}'`
  echo "purePackageName: $purePackageName"
 
  #check purePackageName is empty or not
  if [ -z $purePackageName ] || [ "x$purePackageName" == "x" ]; then
     echo "Pure package name is empty. Aborting..."
     exit 1
  fi

  templateName="temp"

  #check temp folder does exist or not
  if [ -d "$templateName" ]; then
    rm -rf "$BASE/$templateName"
    cp -a $PACK $BASE/$templateName
  else
    cp -a $PACK $BASE/$templateName
  fi
  
  sed -i "s/template/subutai-repo-$purePackageName/g" $BASE/$templateName/DEBIAN/control
  cp $currentPackage $BASE/$templateName/repo/ksks/amd64/trusty/
  mv $BASE/$templateName/ $BASE/subutai-repo-$shortCurrentPackage
  
  CURRENTPACK=$BASE/subutai-repo-$shortCurrentPackage
  echo "CURRENTPACK: $CURRENTPACK"

  dpkg-deb --build $CURRENTPACK
  mv $BASE/subutai-repo-"$shortCurrentPackage".deb $ISOPATH
  rm -rf $BASE/subutai-repo-$shortCurrentPackage
  rm -rf $BASE/$templateName

  echo "Repo wrapper package Successfully created."

  popd
}

